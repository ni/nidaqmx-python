[tool.poetry]
name = "nidaqmx"
version = "1.2.0-dev2"
license = "MIT"
description = "NI-DAQmx Python API"
authors = ["NI <opensource@ni.com>"]
maintainers = [
  "Zach Hindes <zach.hindes@ni.com>",
  "Maxx Boehme <maxx.boehme@ni.com>",
  "Brad Keryan <brad.keryan@ni.com>",
]
readme = "README.rst"
repository = "https://github.com/ni/nidaqmx-python"
documentation = "https://nidaqmx-python.readthedocs.io"
keywords = ["nidaqmx", "nidaq", "daqmx", "daq", "BNC-2090", "BNC-2090A", "BNC-2110", "BNC-2111", "BNC-2115", "BNC-2120", "BNC-2121", "CAL-4309", "CAL-4353", "CB-37F-HVD", "CB-37F-LP", "CB-37FH", "CB-37FV", "CB-68LP", "CB-68LPR", "CSC-3059", "FD-11601", "FD-11603", "FD-11605", "FD-11613", "FD-11614", "FD-11634", "FD-11637", "NI-9201", "NI-9202", "NI-9203", "NI-9204", "NI-9205", "NI-9206", "NI-9207", "NI-9208", "NI-9209", "NI-9210", "NI-9211", "NI-9212", "NI-9213", "NI-9214", "NI-9215", "NI-9216", "NI-9217", "NI-9218", "NI-9219", "NI-9220", "NI-9221", "NI-9222", "NI-9223", "NI-9224", "NI-9225", "NI-9226", "NI-9227", "NI-9228", "NI-9229", "NI-9230", "NI-9231", "NI-9232", "NI-9234", "NI-9234B", "NI-9235", "NI-9236", "NI-9237", "NI-9238", "NI-9239", "NI-9242", "NI-9244", "NI-9246", "NI-9247", "NI-9250", "NI-9251", "NI-9252", "NI-9253", "NI-9260", "NI-9262", "NI-9263", "NI-9264", "NI-9265", "NI-9266", "NI-9269", "NI-9320", "NI-9326", "NI-9344", "NI-9361", "NI-9375", "NI-9401", "NI-9402", "NI-9403", "NI-9411", "NI-9421", "NI-9422", "NI-9423", "NI-9425", "NI-9426", "NI-9435", "NI-9436", "NI-9437", "NI-9469", "NI-9472", "NI-9474", "NI-9475", "NI-9476", "NI-9477", "NI-9478", "NI-9481", "NI-9482", "NI-9485", "NI-9775", "NI-9982D", "NI-9982F", "NI-9982L", "NI-9983D", "NI-9983F", "NI-9983L", "NI-9984D", "NI-9984F", "NI-9984L", "NI-9985D", "NI-9985F", "NI-9985L", "NI-9986D", "NI-9986F", "NI-9986L", "NI-9987D", "NI-9987F", "NI-9987L", "NI-myDAQ", "PCI-4461", "PCI-4474", "PCI-6110", "PCI-6111", "PCI-6115", "PCI-6120", "PCI-6122", "PCI-6123", "PCI-6132", "PCI-6133", "PCI-6143", "PCI-6154", "PCI-6220", "PCI-6221", "PCI-6224", "PCI-6225", "PCI-6229", "PCI-6230", "PCI-6232", "PCI-6233", "PCI-6236", "PCI-6238", "PCI-6239", "PCI-6250", "PCI-6251", "PCI-6254", "PCI-6255", "PCI-6259", "PCI-6280", "PCI-6281", "PCI-6284", "PCI-6289", "PCI-6503", "PCI-6509", "PCI-6510", "PCI-6511", "PCI-6512", "PCI-6513", "PCI-6514", "PCI-6515", "PCI-6516", "PCI-6517", "PCI-6518", "PCI-6519", "PCI-6520", "PCI-6521", "PCI-6527", "PCI-6528", "PCI-6534", "PCI-6601", "PCI-6602", "PCI-6624", "PCI-6703", "PCI-6704", "PCI-6711", "PCI-6713", "PCI-6722", "PCI-6723", "PCI-6731", "PCI-6733", "PCI-DIO-32HS", "PCI-DIO-96", "PCIe-6251", "PCIe-6259", "PCIe-6320", "PCIe-6321", "PCIe-6323", "PCIe-6340", "PCIe-6341", "PCIe-6342", "PCIe-6343", "PCIe-6345", "PCIe-6346", "PCIe-6347", "PCIe-6350", "PCIe-6351", "PCIe-6352", "PCIe-6353", "PCIe-6355", "PCIe-6357", "PCIe-6361", "PCIe-6363", "PCIe-6374", "PCIe-6376", "PCIe-6509", "PCIe-6535", "PCIe-6535B", "PCIe-6536", "PCIe-6536B", "PCIe-6537", "PCIe-6537B", "PCIe-6612", "PCIe-6738", "PXI-4461", "PXI-4465", "PXI-4495", "PXI-4496", "PXI-4498", "PXI-6115", "PXI-6120", "PXI-6122", "PXI-6123", "PXI-6132", "PXI-6133", "PXI-6143", "PXI-6220", "PXI-6221", "PXI-6224", "PXI-6225", "PXI-6229", "PXI-6230", "PXI-6232", "PXI-6233", "PXI-6236", "PXI-6238", "PXI-6239", "PXI-6250", "PXI-6251", "PXI-6254", "PXI-6255", "PXI-6259", "PXI-6280", "PXI-6281", "PXI-6284", "PXI-6289", "PXI-6508", "PXI-6509", "PXI-6511", "PXI-6512", "PXI-6513", "PXI-6514", "PXI-6515", "PXI-6521", "PXI-6527", "PXI-6528", "PXI-6529", "PXI-6533", "PXI-6534", "PXI-6602", "PXI-6608", "PXI-6624", "PXI-6704", "PXI-6711", "PXI-6713", "PXI-6722", "PXI-6723", "PXI-6733", "PXIe-4300", "PXIe-4302", "PXIe-4303", "PXIe-4304", "PXIe-4305", "PXIe-4309", "PXIe-4310", "PXIe-4311", "PXIe-4322", "PXIe-4330", "PXIe-4331", "PXIe-4339", "PXIe-4340", "PXIe-4353", "PXIe-4357", "PXIe-4463", "PXIe-4464", "PXIe-4480", "PXIe-4481", "PXIe-4492", "PXIe-4496", "PXIe-4497", "PXIe-4498", "PXIe-4499", "PXIe-4597", "PXIe-4599", "PXIe-4610", "PXIe-6124", "PXIe-6251", "PXIe-6259", "PXIe-6321", "PXIe-6323", "PXIe-6341", "PXIe-6343", "PXIe-6345", "PXIe-6349", "PXIe-6351", "PXIe-6353", "PXIe-6355", "PXIe-6356", "PXIe-6357", "PXIe-6358", "PXIe-6361", "PXIe-6363", "PXIe-6365", "PXIe-6366", "PXIe-6368", "PXIe-6375", "PXIe-6376", "PXIe-6378", "PXIe-6381", "PXIe-6383", "PXIe-6386", "PXIe-6396", "PXIe-6509", "PXIe-6535", "PXIe-6535B", "PXIe-6536", "PXIe-6536B", "PXIe-6537", "PXIe-6537B", "PXIe-6612", "PXIe-6614", "PXIe-6738", "PXIe-6739", "RM-24999", "RM-4302", "RM-4304", "RM-4339", "SC-2042", "SC-2043-SG", "SC-2060", "SC-2061", "SC-2062", "SC-2075", "SCB-100", "SCB-68", "SCB-68A", "SCC-68", "TB-2705", "TB-2706", "TB-2708", "TB-2709", "TB-2715", "TB-4300", "TB-4300B", "TB-4300C", "TB-4302", "TB-4302C", "TB-4304", "TB-4309", "TB-4310", "TB-4322", "TB-4330", "TB-4339", "TB-4339B", "TB-4339C", "TB-4340", "TB-4353", "TB-4357", "TB-9212", "TB-9214", "TBX-68", "TC-4353", "TS-15000", "TS-15010", "TS-15050", "TS-15100", "TS-15110", "TS-15120", "TS-15130", "TS-15200", "USB-4431", "USB-4432", "USB-6000", "USB-6001", "USB-6002", "USB-6003", "USB-6008", "USB-6008OEM1", "USB-6009", "USB-6009OEM1", "USB-6009OEM2", "USB-6210", "USB-6211", "USB-6212", "USB-6215", "USB-6216", "USB-6218", "USB-6221", "USB-6225", "USB-6229", "USB-6251", "USB-6255", "USB-6259", "USB-6281", "USB-6289", "USB-6341", "USB-6343", "USB-6346", "USB-6349", "USB-6351", "USB-6353", "USB-6356", "USB-6361", "USB-6363", "USB-6366", "USB-6421", "USB-6423", "USB-6451", "USB-6453", "USB-6501", "USB-6509", "USB-6525", "USB-TC01", "cDAQ-9170", "cDAQ-9171", "cDAQ-9171EX", "cDAQ-9173", "cDAQ-9174", "cDAQ-9177", "cDAQ-9178", "cDAQ-9179", "cDAQ-9181", "cDAQ-9183", "cDAQ-9184", "cDAQ-9185", "cDAQ-9187", "cDAQ-9188", "cDAQ-9188XT", "cDAQ-9189", "cDAQ-9191"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: System :: Hardware :: Hardware Drivers",
]
exclude = ["nidaqmx/tests"]
packages = [{ include = "nidaqmx", from = "generated" }]

[tool.poetry.dependencies]
python = "^3.9"
numpy = [
  { version = ">=1.22", python = ">=3.9,<3.12" },
  { version = ">=1.26", python = ">=3.12,<3.13" },
  { version = ">=2.1", python = "^3.13" },
]
deprecation = ">=2.1"
grpcio = { version = ">=1.49.0,<2.0", optional = true }
protobuf = { version = ">=4.21", optional = true }
hightime = ">=0.2.2"
tzlocal = "^5.0"
python-decouple = ">=3.8"
click = [
  { version = ">=8.0.0,<8.2.0", python = ">=3.9,<3.10" },
  { version = ">=8.0.0", python = "^3.10" },
]
distro = { version = ">=1.9.0", platform = "linux" }
requests = ">=2.25.0"

[tool.poetry.extras]
grpc = ["grpcio", "protobuf"]

[tool.poetry.group.codegen.dependencies]
Mako = "^1.2"
grpcio-tools = [
  { version = "1.49.1", python = ">=3.9,<3.12" },
  { version = "1.59.0", python = ">=3.12,<3.13" },
  { version = "1.67.0", python = "^3.13" },
]
mypy-protobuf = ">=3.4"
tomlkit = ">=0.11.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
Sphinx = { version = ">=8.2", python = "^3.11" }
sphinx-rtd-theme = ">=1.0.0"
toml = ">=0.10.2"

[tool.poetry.group.examples]
# The "examples" group is optional because matplotlib does not distribute wheels for 32-bit Windows.
optional = true

[tool.poetry.group.examples.dependencies]
matplotlib = [
  { version = ">=3.9.0,<3.10.0", python = ">=3.9,<3.10" },
  { version = ">=3.9.0", python = "^3.10" },
]
nptdms = ">=1.9.0"

[tool.poetry.group.lint.dependencies]
bandit = { version = ">=1.7", extras = ["toml"] }
ni-python-styleguide = ">=0.4.1"
mypy = ">=1.0"
types-protobuf = ">=4.21"
types-requests = ">=2.25.0"
types-grpcio = ">=1.0"

[tool.poetry.group.test.dependencies]
pytest = ">=7.2"
pytest-cov = ">=4.0"
pytest-mock = ">=3.0"
pykka = ">=3.0"
tox = ">=3.24"

[tool.poetry.scripts]
nidaqmx = 'nidaqmx.__main__:main'

[tool.black]
line-length = 100
extend_exclude = ".tox/|docs/|generated/|src/codegen/metadata/|src/codegen/templates/|src/handwritten/"

[tool.ni-python-styleguide]
extend_exclude = ".tox,docs,generated,src/codegen/metadata,src/codegen/templates,src/handwritten"

[tool.pytest.ini_options]
addopts = "--doctest-modules --strict-markers"
filterwarnings = ["always::ImportWarning", "always::ResourceWarning"]
testpaths = ["tests"]
markers = [
  # Defines custom markers used by nidaqmx tests. Prevents PytestUnknownMarkWarning.
  "library_only(reason=...): run the test with only the library interpreter implementation.",
  "library_skip(reason=...): skip the given test function with the library interpreter implementation.",
  "library_xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict): mark the test function as an expected failure with the library interpreter implementation.",
  "grpc_only(reason=...): run the test with only the gRPC interpreter implementation.",
  "grpc_skip(reason=...): skip the given test function with the gRPC interpreter implementation.",
  "grpc_xfail(condition, ..., *, reason=..., run=True, raises=None, strict=xfail_strict): mark the test function as an expected failure with the gRPC interpreter implementation.",
  "new_task_name: name of the new task to be created.",
  "device_name: name of the device used for testing.",
  "task_name: the existing task name to be used for testing.",
  "channel_name: the existing channel name to be used for testing.",
  "scale_name: the existing scale name to be used for testing.",
  "timeout: the timeout in seconds.",
  "grpc_session_name: specifies GrpcSessionOptions.session_name.",
  "grpc_session_initialization_behavior: specifies GrpcSessionOptions.initialization_behavior.",
  "temporary_grpc_channel(options=...): specifies that the test uses a separate gRPC channel.",
]

[build-system]
requires = ["poetry-core>=1.8"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files = "generated/,tests/"
check_untyped_defs = true
namespace_packages = true
plugins = "numpy.typing.mypy_plugin"
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
  # https://github.com/HBNetwork/python-decouple/issues/122 - Add support for type stubs
  "decouple.*",
  # https://github.com/briancurtin/deprecation/issues/56 - Add type information (PEP 561)
  "deprecation.*",
  "grpc.experimental.*",
  # https://github.com/ni/hightime/issues/4 - Add type annotations
  "hightime.*",
  "importlib_metadata",
  "mako.*",
  "nidaqmx.*",
]
ignore_missing_imports = true

[[tool.mypy.overrides]]
# mypy-protobuf codegen has some unused ignores.
module = ["nidaqmx._stubs.*"]
warn_unused_ignores = false

[tool.bandit]
skips = [
  "B101", # assert_used
]
