# Do not edit this file; it was automatically generated.

import ctypes
import numpy

from nidaqmx._base_interpreter import BaseInterpreter
from nidaqmx._lib import lib_importer, ctypes_byte_str, c_bool32, wrapped_ndpointer
from nidaqmx.errors import check_for_error, is_string_buffer_too_small, is_array_buffer_too_small

class LibraryInterpreter(BaseInterpreter):
    """
    Library C<->Python interpreter.
    This class is responsible for interpreting the Library's C API.

    """
    
    def __init__(self):
        # These lists keep C callback objects in memory as ctypes doesn't.
        # Program will crash if callback is made after object is garbage
        # collected.
        self._done_event_callbacks = []
        self._every_n_samples_event_callbacks = []
        self._signal_event_callbacks = []
        

    def add_cdaq_sync_connection(self, port_list):
        cfunc = lib_importer.windll.DAQmxAddCDAQSyncConnection
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str]

        error_code = cfunc(
            port_list)
        check_for_error(error_code)

    def add_global_chans_to_task(self, task, channel_names):
        cfunc = lib_importer.windll.DAQmxAddGlobalChansToTask
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str]

        error_code = cfunc(
            task, channel_names)
        check_for_error(error_code)

    def add_network_device(
            self, ip_address, device_name, attempt_reservation, timeout):
        cfunc = lib_importer.windll.DAQmxAddNetworkDevice
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str, c_bool32,
                        ctypes.c_double, ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            device_name_out = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                ip_address, device_name, attempt_reservation, timeout,
                device_name_out, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return device_name_out.value.decode('ascii')

    def are_configured_cdaq_sync_ports_disconnected(
            self, chassis_devices_ports, timeout):
        disconnected_ports_exist = c_bool32()

        cfunc = lib_importer.windll.DAQmxAreConfiguredCDAQSyncPortsDisconnected
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes.c_double,
                        ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            chassis_devices_ports, timeout,
            ctypes.byref(disconnected_ports_exist))
        check_for_error(error_code)
        return disconnected_ports_exist.value

    def auto_configure_cdaq_sync_connections(
            self, chassis_devices_ports, timeout):
        cfunc = lib_importer.windll.DAQmxAutoConfigureCDAQSyncConnections
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes.c_double]

        error_code = cfunc(
            chassis_devices_ports, timeout)
        check_for_error(error_code)

    def calculate_reverse_poly_coeff(
            self, forward_coeffs, min_val_x, max_val_x, num_points_to_compute,
            reverse_poly_order):
        size = len(forward_coeffs) if reverse_poly_order < 0 else reverse_poly_order + 1
        reverse_coeffs = numpy.zeros(size, dtype=numpy.float64)

        cfunc = lib_importer.windll.DAQmxCalculateReversePolyCoeff
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W'))]

        error_code = cfunc(
            forward_coeffs, len(forward_coeffs), min_val_x, max_val_x,
            num_points_to_compute, reverse_poly_order, reverse_coeffs)
        check_for_error(error_code)
        return reverse_coeffs.tolist()

    def cfg_anlg_edge_ref_trig(
            self, task, trigger_source, pretrigger_samples, trigger_slope,
            trigger_level):
        cfunc = lib_importer.windll.DAQmxCfgAnlgEdgeRefTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int, ctypes.c_double, ctypes.c_uint]

        error_code = cfunc(
            task, trigger_source, trigger_slope, trigger_level,
            pretrigger_samples)
        check_for_error(error_code)

    def cfg_anlg_edge_start_trig(
            self, task, trigger_source, trigger_slope, trigger_level):
        cfunc = lib_importer.windll.DAQmxCfgAnlgEdgeStartTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int, ctypes.c_double]

        error_code = cfunc(
            task, trigger_source, trigger_slope, trigger_level)
        check_for_error(error_code)

    def cfg_anlg_multi_edge_ref_trig(
            self, task, trigger_sources, trigger_slope_array,
            trigger_level_array, pretrigger_samples, array_size):
        raise NotImplementedError

    def cfg_anlg_multi_edge_start_trig(
            self, task, trigger_sources, trigger_slope_array,
            trigger_level_array, array_size):
        raise NotImplementedError

    def cfg_anlg_window_ref_trig(
            self, task, trigger_source, window_top, window_bottom,
            pretrigger_samples, trigger_when):
        cfunc = lib_importer.windll.DAQmxCfgAnlgWindowRefTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int, ctypes.c_double, ctypes.c_double,
                        ctypes.c_uint]

        error_code = cfunc(
            task, trigger_source, trigger_when, window_top, window_bottom,
            pretrigger_samples)
        check_for_error(error_code)

    def cfg_anlg_window_start_trig(
            self, task, window_top, window_bottom, trigger_source,
            trigger_when):
        cfunc = lib_importer.windll.DAQmxCfgAnlgWindowStartTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int, ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, trigger_source, trigger_when, window_top, window_bottom)
        check_for_error(error_code)

    def cfg_burst_handshaking_timing_export_clock(
            self, task, sample_clk_rate, sample_clk_outp_term, sample_mode,
            samps_per_chan, sample_clk_pulse_polarity, pause_when,
            ready_event_active_level):
        cfunc = lib_importer.windll.DAQmxCfgBurstHandshakingTimingExportClock
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int,
                        ctypes.c_ulonglong, ctypes.c_double, ctypes_byte_str,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int]

        error_code = cfunc(
            task, sample_mode, samps_per_chan, sample_clk_rate,
            sample_clk_outp_term, sample_clk_pulse_polarity, pause_when,
            ready_event_active_level)
        check_for_error(error_code)

    def cfg_burst_handshaking_timing_import_clock(
            self, task, sample_clk_rate, sample_clk_src, sample_mode,
            samps_per_chan, sample_clk_active_edge, pause_when,
            ready_event_active_level):
        cfunc = lib_importer.windll.DAQmxCfgBurstHandshakingTimingImportClock
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int,
                        ctypes.c_ulonglong, ctypes.c_double, ctypes_byte_str,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int]

        error_code = cfunc(
            task, sample_mode, samps_per_chan, sample_clk_rate,
            sample_clk_src, sample_clk_active_edge, pause_when,
            ready_event_active_level)
        check_for_error(error_code)

    def cfg_change_detection_timing(
            self, task, rising_edge_chan, falling_edge_chan, sample_mode,
            samps_per_chan):
        cfunc = lib_importer.windll.DAQmxCfgChangeDetectionTiming
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_ulonglong]

        error_code = cfunc(
            task, rising_edge_chan, falling_edge_chan, sample_mode,
            samps_per_chan)
        check_for_error(error_code)

    def cfg_dig_edge_ref_trig(
            self, task, trigger_source, pretrigger_samples, trigger_edge):
        cfunc = lib_importer.windll.DAQmxCfgDigEdgeRefTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int, ctypes.c_uint]

        error_code = cfunc(
            task, trigger_source, trigger_edge, pretrigger_samples)
        check_for_error(error_code)

    def cfg_dig_edge_start_trig(self, task, trigger_source, trigger_edge):
        cfunc = lib_importer.windll.DAQmxCfgDigEdgeStartTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int]

        error_code = cfunc(
            task, trigger_source, trigger_edge)
        check_for_error(error_code)

    def cfg_dig_pattern_ref_trig(
            self, task, trigger_source, trigger_pattern, pretrigger_samples,
            trigger_when):
        cfunc = lib_importer.windll.DAQmxCfgDigPatternRefTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_uint]

        error_code = cfunc(
            task, trigger_source, trigger_pattern, trigger_when,
            pretrigger_samples)
        check_for_error(error_code)

    def cfg_dig_pattern_start_trig(
            self, task, trigger_source, trigger_pattern, trigger_when):
        cfunc = lib_importer.windll.DAQmxCfgDigPatternStartTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            task, trigger_source, trigger_pattern, trigger_when)
        check_for_error(error_code)

    def cfg_handshaking_timing(self, task, sample_mode, samps_per_chan):
        cfunc = lib_importer.windll.DAQmxCfgHandshakingTiming
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int,
                        ctypes.c_ulonglong]

        error_code = cfunc(
            task, sample_mode, samps_per_chan)
        check_for_error(error_code)

    def cfg_implicit_timing(self, task, sample_mode, samps_per_chan):
        cfunc = lib_importer.windll.DAQmxCfgImplicitTiming
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int,
                        ctypes.c_ulonglong]

        error_code = cfunc(
            task, sample_mode, samps_per_chan)
        check_for_error(error_code)

    def cfg_input_buffer(self, task, num_samps_per_chan):
        raise NotImplementedError

    def cfg_output_buffer(self, task, num_samps_per_chan):
        raise NotImplementedError

    def cfg_pipelined_samp_clk_timing(
            self, task, rate, source, active_edge, sample_mode,
            samps_per_chan):
        cfunc = lib_importer.windll.DAQmxCfgPipelinedSampClkTiming
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_ulonglong]

        error_code = cfunc(
            task, source, rate, active_edge, sample_mode, samps_per_chan)
        check_for_error(error_code)

    def cfg_samp_clk_timing(
            self, task, rate, source, active_edge, sample_mode,
            samps_per_chan):
        cfunc = lib_importer.windll.DAQmxCfgSampClkTiming
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_ulonglong]

        error_code = cfunc(
            task, source, rate, active_edge, sample_mode, samps_per_chan)
        check_for_error(error_code)

    def cfg_time_start_trig(self, task, when, timescale):
        raise NotImplementedError

    def cfg_watchdog_ao_expir_states(
            self, task, channel_names, expir_state_array, output_type_array):
        cfunc = lib_importer.windll.DAQmxCfgWatchdogAOExpirStates
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), wrapped_ndpointer(dtype=numpy.int32,
                        flags=('C','W')), ctypes.c_uint]

        error_code = cfunc(
            task, channel_names, expir_state_array, output_type_array,
            len(output_type_array))
        check_for_error(error_code)

    def cfg_watchdog_co_expir_states(
            self, task, channel_names, expir_state_array):
        cfunc = lib_importer.windll.DAQmxCfgWatchdogCOExpirStates
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                        ctypes.c_uint]

        error_code = cfunc(
            task, channel_names, expir_state_array, len(expir_state_array))
        check_for_error(error_code)

    def cfg_watchdog_do_expir_states(
            self, task, channel_names, expir_state_array):
        cfunc = lib_importer.windll.DAQmxCfgWatchdogDOExpirStates
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                        ctypes.c_uint]

        error_code = cfunc(
            task, channel_names, expir_state_array, len(expir_state_array))
        check_for_error(error_code)

    def clear_task(self, task):
        cfunc = lib_importer.windll.DAQmxClearTask
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle]

        error_code = cfunc(
            task)
        check_for_error(error_code)

    def clear_teds(self, physical_channel):
        cfunc = lib_importer.windll.DAQmxClearTEDS
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str]

        error_code = cfunc(
            physical_channel)
        check_for_error(error_code)

    def configure_logging(
            self, task, file_path, logging_mode, group_name, operation):
        cfunc = lib_importer.windll.DAQmxConfigureLogging
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int, ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            task, file_path, logging_mode, group_name, operation)
        check_for_error(error_code)

    def configure_teds(self, physical_channel, file_path):
        cfunc = lib_importer.windll.DAQmxConfigureTEDS
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str]

        error_code = cfunc(
            physical_channel, file_path)
        check_for_error(error_code)

    def connect_terms(
            self, source_terminal, destination_terminal, signal_modifiers):
        cfunc = lib_importer.windll.DAQmxConnectTerms
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            source_terminal, destination_terminal, signal_modifiers)
        check_for_error(error_code)

    def control_watchdog_task(self, task, action):
        cfunc = lib_importer.windll.DAQmxControlWatchdogTask
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int]

        error_code = cfunc(
            task, action)
        check_for_error(error_code)

    def create_ai_accel4_wire_dc_voltage_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, voltage_excit_source, voltage_excit_val,
            use_excit_for_scaling, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIAccel4WireDCVoltageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double, c_bool32,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, voltage_excit_source, voltage_excit_val,
            use_excit_for_scaling, custom_scale_name)
        check_for_error(error_code)

    def create_ai_accel_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, current_excit_source, current_excit_val,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIAccelChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, current_excit_source, current_excit_val,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_accel_charge_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIAccelChargeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_bridge_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIBridgeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, custom_scale_name)
        check_for_error(error_code)

    def create_ai_charge_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIChargeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_current_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, shunt_resistor_loc,
            ext_shunt_resistor_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAICurrentChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, shunt_resistor_loc,
            ext_shunt_resistor_val, custom_scale_name)
        check_for_error(error_code)

    def create_ai_current_rms_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, shunt_resistor_loc,
            ext_shunt_resistor_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAICurrentRMSChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, shunt_resistor_loc,
            ext_shunt_resistor_val, custom_scale_name)
        check_for_error(error_code)

    def create_ai_force_bridge_polynomial_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, forward_coeffs,
            reverse_coeffs, electrical_units, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIForceBridgePolynomialChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, forward_coeffs,
            len(forward_coeffs), reverse_coeffs, len(reverse_coeffs),
            electrical_units, physical_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_force_bridge_table_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, electrical_vals,
            electrical_units, physical_vals, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIForceBridgeTableChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, electrical_vals,
            len(electrical_vals), electrical_units, physical_vals,
            len(physical_vals), physical_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_force_bridge_two_point_lin_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance,
            first_electrical_val, second_electrical_val, electrical_units,
            first_physical_val, second_physical_val, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIForceBridgeTwoPointLinChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance,
            first_electrical_val, second_electrical_val, electrical_units,
            first_physical_val, second_physical_val, physical_units,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_force_iepe_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, current_excit_source, current_excit_val,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIForceIEPEChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, current_excit_source, current_excit_val,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_freq_voltage_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, threshold_level, hysteresis, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIFreqVoltageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_double, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, threshold_level, hysteresis, custom_scale_name)
        check_for_error(error_code)

    def create_ai_microphone_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, units, mic_sensitivity, max_snd_press_level,
            current_excit_source, current_excit_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIMicrophoneChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, units, mic_sensitivity, max_snd_press_level,
            current_excit_source, current_excit_val, custom_scale_name)
        check_for_error(error_code)

    def create_ai_pos_eddy_curr_prox_probe_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, sensitivity, sensitivity_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIPosEddyCurrProxProbeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, sensitivity, sensitivity_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_pos_lvdt_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, sensitivity, sensitivity_units,
            voltage_excit_source, voltage_excit_val, voltage_excit_freq,
            ac_excit_wire_mode, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIPosLVDTChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        ctypes.c_int, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, sensitivity, sensitivity_units,
            voltage_excit_source, voltage_excit_val, voltage_excit_freq,
            ac_excit_wire_mode, custom_scale_name)
        check_for_error(error_code)

    def create_ai_pos_rvdt_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, sensitivity, sensitivity_units,
            voltage_excit_source, voltage_excit_val, voltage_excit_freq,
            ac_excit_wire_mode, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIPosRVDTChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        ctypes.c_int, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, sensitivity, sensitivity_units,
            voltage_excit_source, voltage_excit_val, voltage_excit_freq,
            ac_excit_wire_mode, custom_scale_name)
        check_for_error(error_code)

    def create_ai_power_chan(
            self, task, physical_channel, voltage_setpoint, current_setpoint,
            output_enable, name_to_assign_to_channel):
        cfunc = lib_importer.windll.DAQmxCreateAIPowerChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        c_bool32]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            voltage_setpoint, current_setpoint, output_enable)
        check_for_error(error_code)

    def create_ai_pressure_bridge_polynomial_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, forward_coeffs,
            reverse_coeffs, electrical_units, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIPressureBridgePolynomialChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, forward_coeffs,
            len(forward_coeffs), reverse_coeffs, len(reverse_coeffs),
            electrical_units, physical_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_pressure_bridge_table_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, electrical_vals,
            electrical_units, physical_vals, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIPressureBridgeTableChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, electrical_vals,
            len(electrical_vals), electrical_units, physical_vals,
            len(physical_vals), physical_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_pressure_bridge_two_point_lin_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance,
            first_electrical_val, second_electrical_val, electrical_units,
            first_physical_val, second_physical_val, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIPressureBridgeTwoPointLinChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance,
            first_electrical_val, second_electrical_val, electrical_units,
            first_physical_val, second_physical_val, physical_units,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_resistance_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIResistanceChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val, custom_scale_name)
        check_for_error(error_code)

    def create_ai_rosette_strain_gage_chan(
            self, task, physical_channel, rosette_type, gage_orientation,
            rosette_meas_types, name_to_assign_to_channel, min_val, max_val,
            strain_config, voltage_excit_source, voltage_excit_val,
            gage_factor, nominal_gage_resistance, poisson_ratio,
            lead_wire_resistance):
        cfunc = lib_importer.windll.DAQmxCreateAIRosetteStrainGageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                        ctypes.c_uint, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, rosette_type, gage_orientation, rosette_meas_types,
            len(rosette_meas_types), strain_config, voltage_excit_source,
            voltage_excit_val, gage_factor, nominal_gage_resistance,
            poisson_ratio, lead_wire_resistance)
        check_for_error(error_code)

    def create_ai_strain_gage_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, strain_config, voltage_excit_source,
            voltage_excit_val, gage_factor, initial_bridge_voltage,
            nominal_gage_resistance, poisson_ratio, lead_wire_resistance,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIStrainGageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, strain_config, voltage_excit_source,
            voltage_excit_val, gage_factor, initial_bridge_voltage,
            nominal_gage_resistance, poisson_ratio, lead_wire_resistance,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_temp_built_in_sensor_chan(
            self, task, physical_channel, name_to_assign_to_channel, units):
        cfunc = lib_importer.windll.DAQmxCreateAITempBuiltInSensorChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, units)
        check_for_error(error_code)

    def create_ai_thrmcpl_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, thermocouple_type, cjc_source, cjc_val,
            cjc_channel):
        cfunc = lib_importer.windll.DAQmxCreateAIThrmcplChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, thermocouple_type, cjc_source, cjc_val,
            cjc_channel)
        check_for_error(error_code)

    def create_ai_thrmstr_chan_iex(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val, a, b, c):
        cfunc = lib_importer.windll.DAQmxCreateAIThrmstrChanIex
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val, a, b, c)
        check_for_error(error_code)

    def create_ai_thrmstr_chan_vex(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, voltage_excit_source,
            voltage_excit_val, a, b, c, r_1):
        cfunc = lib_importer.windll.DAQmxCreateAIThrmstrChanVex
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, voltage_excit_source,
            voltage_excit_val, a, b, c, r_1)
        check_for_error(error_code)

    def create_ai_torque_bridge_polynomial_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, forward_coeffs,
            reverse_coeffs, electrical_units, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAITorqueBridgePolynomialChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, forward_coeffs,
            len(forward_coeffs), reverse_coeffs, len(reverse_coeffs),
            electrical_units, physical_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_torque_bridge_table_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, electrical_vals,
            electrical_units, physical_vals, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAITorqueBridgeTableChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance, electrical_vals,
            len(electrical_vals), electrical_units, physical_vals,
            len(physical_vals), physical_units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_torque_bridge_two_point_lin_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance,
            first_electrical_val, second_electrical_val, electrical_units,
            first_physical_val, second_physical_val, physical_units,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAITorqueBridgeTwoPointLinChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, bridge_config, voltage_excit_source,
            voltage_excit_val, nominal_bridge_resistance,
            first_electrical_val, second_electrical_val, electrical_units,
            first_physical_val, second_physical_val, physical_units,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_velocity_iepe_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, current_excit_source, current_excit_val,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIVelocityIEPEChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, sensitivity,
            sensitivity_units, current_excit_source, current_excit_val,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_voltage_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIVoltageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name)
        check_for_error(error_code)

    def create_ai_voltage_chan_with_excit(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, bridge_config,
            voltage_excit_source, voltage_excit_val, use_excit_for_scaling,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIVoltageChanWithExcit
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_int, ctypes.c_double, c_bool32,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, bridge_config,
            voltage_excit_source, voltage_excit_val, use_excit_for_scaling,
            custom_scale_name)
        check_for_error(error_code)

    def create_ai_voltage_rms_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAIVoltageRMSChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name)
        check_for_error(error_code)

    def create_airtd_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, rtd_type, resistance_config, current_excit_source,
            current_excit_val, r_0):
        cfunc = lib_importer.windll.DAQmxCreateAIRTDChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_int, ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, rtd_type, resistance_config, current_excit_source,
            current_excit_val, r_0)
        check_for_error(error_code)

    def create_ao_current_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAOCurrentChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, custom_scale_name)
        check_for_error(error_code)

    def create_ao_func_gen_chan(
            self, task, physical_channel, name_to_assign_to_channel, type,
            freq, amplitude, offset):
        cfunc = lib_importer.windll.DAQmxCreateAOFuncGenChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, type, freq,
            amplitude, offset)
        check_for_error(error_code)

    def create_ao_voltage_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateAOVoltageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, custom_scale_name)
        check_for_error(error_code)

    def create_ci_ang_encoder_chan(
            self, task, counter, name_to_assign_to_channel, decoding_type,
            zidx_enable, zidx_val, zidx_phase, units, pulses_per_rev,
            initial_angle, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCIAngEncoderChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, c_bool32,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_uint, ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, decoding_type,
            zidx_enable, zidx_val, zidx_phase, units, pulses_per_rev,
            initial_angle, custom_scale_name)
        check_for_error(error_code)

    def create_ci_ang_velocity_chan(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            decoding_type, units, pulses_per_rev, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCIAngVelocityChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_uint,
                        ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val,
            decoding_type, units, pulses_per_rev, custom_scale_name)
        check_for_error(error_code)

    def create_ci_count_edges_chan(
            self, task, counter, name_to_assign_to_channel, edge,
            initial_count, count_direction):
        cfunc = lib_importer.windll.DAQmxCreateCICountEdgesChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_uint,
                        ctypes.c_int]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, edge, initial_count,
            count_direction)
        check_for_error(error_code)

    def create_ci_duty_cycle_chan(
            self, task, counter, name_to_assign_to_channel, min_freq,
            max_freq, edge, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCIDutyCycleChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_freq, max_freq,
            edge, custom_scale_name)
        check_for_error(error_code)

    def create_ci_freq_chan(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            units, edge, meas_method, meas_time, divisor, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCIFreqChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_uint, ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val, units,
            edge, meas_method, meas_time, divisor, custom_scale_name)
        check_for_error(error_code)

    def create_ci_lin_encoder_chan(
            self, task, counter, name_to_assign_to_channel, decoding_type,
            zidx_enable, zidx_val, zidx_phase, units, dist_per_pulse,
            initial_pos, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCILinEncoderChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, c_bool32,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, decoding_type,
            zidx_enable, zidx_val, zidx_phase, units, dist_per_pulse,
            initial_pos, custom_scale_name)
        check_for_error(error_code)

    def create_ci_lin_velocity_chan(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            decoding_type, units, dist_per_pulse, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCILinVelocityChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val,
            decoding_type, units, dist_per_pulse, custom_scale_name)
        check_for_error(error_code)

    def create_ci_period_chan(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            units, edge, meas_method, meas_time, divisor, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCIPeriodChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_uint, ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val, units,
            edge, meas_method, meas_time, divisor, custom_scale_name)
        check_for_error(error_code)

    def create_ci_pulse_chan_freq(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            units):
        cfunc = lib_importer.windll.DAQmxCreateCIPulseChanFreq
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val, units)
        check_for_error(error_code)

    def create_ci_pulse_chan_ticks(
            self, task, counter, name_to_assign_to_channel, source_terminal,
            min_val, max_val):
        cfunc = lib_importer.windll.DAQmxCreateCIPulseChanTicks
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes_byte_str, ctypes.c_double,
                        ctypes.c_double]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, source_terminal,
            min_val, max_val)
        check_for_error(error_code)

    def create_ci_pulse_chan_time(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            units):
        cfunc = lib_importer.windll.DAQmxCreateCIPulseChanTime
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val, units)
        check_for_error(error_code)

    def create_ci_pulse_width_chan(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            units, starting_edge, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCIPulseWidthChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val, units,
            starting_edge, custom_scale_name)
        check_for_error(error_code)

    def create_ci_semi_period_chan(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCISemiPeriodChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val, units,
            custom_scale_name)
        check_for_error(error_code)

    def create_ci_two_edge_sep_chan(
            self, task, counter, name_to_assign_to_channel, min_val, max_val,
            units, first_edge, second_edge, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCITwoEdgeSepChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, min_val, max_val, units,
            first_edge, second_edge, custom_scale_name)
        check_for_error(error_code)

    def create_cigps_timestamp_chan(
            self, task, counter, name_to_assign_to_channel, units,
            sync_method, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateCIGPSTimestampChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, units, sync_method,
            custom_scale_name)
        check_for_error(error_code)

    def create_co_pulse_chan_freq(
            self, task, counter, name_to_assign_to_channel, units, idle_state,
            initial_delay, freq, duty_cycle):
        cfunc = lib_importer.windll.DAQmxCreateCOPulseChanFreq
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, units, idle_state,
            initial_delay, freq, duty_cycle)
        check_for_error(error_code)

    def create_co_pulse_chan_ticks(
            self, task, counter, source_terminal, name_to_assign_to_channel,
            idle_state, initial_delay, low_ticks, high_ticks):
        cfunc = lib_importer.windll.DAQmxCreateCOPulseChanTicks
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes_byte_str, ctypes.c_int,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, source_terminal,
            idle_state, initial_delay, low_ticks, high_ticks)
        check_for_error(error_code)

    def create_co_pulse_chan_time(
            self, task, counter, name_to_assign_to_channel, units, idle_state,
            initial_delay, low_time, high_time):
        cfunc = lib_importer.windll.DAQmxCreateCOPulseChanTime
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, counter, name_to_assign_to_channel, units, idle_state,
            initial_delay, low_time, high_time)
        check_for_error(error_code)

    def create_di_chan(
            self, task, lines, name_to_assign_to_lines, line_grouping):
        cfunc = lib_importer.windll.DAQmxCreateDIChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            task, lines, name_to_assign_to_lines, line_grouping)
        check_for_error(error_code)

    def create_do_chan(
            self, task, lines, name_to_assign_to_lines, line_grouping):
        cfunc = lib_importer.windll.DAQmxCreateDOChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            task, lines, name_to_assign_to_lines, line_grouping)
        check_for_error(error_code)

    def create_lin_scale(
            self, name, slope, y_intercept, pre_scaled_units, scaled_units):
        cfunc = lib_importer.windll.DAQmxCreateLinScale
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            name, slope, y_intercept, pre_scaled_units, scaled_units)
        check_for_error(error_code)

    def create_map_scale(
            self, name, prescaled_min, prescaled_max, scaled_min, scaled_max,
            pre_scaled_units, scaled_units):
        cfunc = lib_importer.windll.DAQmxCreateMapScale
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double, ctypes.c_double, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            name, prescaled_min, prescaled_max, scaled_min, scaled_max,
            pre_scaled_units, scaled_units)
        check_for_error(error_code)

    def create_polynomial_scale(
            self, name, forward_coeffs, reverse_coeffs, pre_scaled_units,
            scaled_units):
        cfunc = lib_importer.windll.DAQmxCreatePolynomialScale
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            name, forward_coeffs, len(forward_coeffs), reverse_coeffs,
            len(reverse_coeffs), pre_scaled_units, scaled_units)
        check_for_error(error_code)

    def create_table_scale(
            self, name, prescaled_vals, scaled_vals, pre_scaled_units,
            scaled_units):
        cfunc = lib_importer.windll.DAQmxCreateTableScale
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            name, prescaled_vals, len(prescaled_vals), scaled_vals,
            len(scaled_vals), pre_scaled_units, scaled_units)
        check_for_error(error_code)

    def create_task(self, session_name):
        task = lib_importer.task_handle(0)

        cfunc = lib_importer.windll.DAQmxCreateTask
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str]

        error_code = cfunc(
            session_name, ctypes.byref(task))
        check_for_error(error_code)
        return task

    def create_tedsai_accel_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, current_excit_source,
            current_excit_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIAccelChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, current_excit_source,
            current_excit_val, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_bridge_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIBridgeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_current_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, shunt_resistor_loc,
            ext_shunt_resistor_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAICurrentChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, shunt_resistor_loc,
            ext_shunt_resistor_val, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_force_bridge_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIForceBridgeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_force_iepe_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, current_excit_source,
            current_excit_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIForceIEPEChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, current_excit_source,
            current_excit_val, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_microphone_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, units, max_snd_press_level, current_excit_source,
            current_excit_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIMicrophoneChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, units, max_snd_press_level, current_excit_source,
            current_excit_val, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_pos_lvdt_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            voltage_excit_freq, ac_excit_wire_mode, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIPosLVDTChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            voltage_excit_freq, ac_excit_wire_mode, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_pos_rvdt_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            voltage_excit_freq, ac_excit_wire_mode, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIPosRVDTChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            voltage_excit_freq, ac_excit_wire_mode, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_pressure_bridge_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIPressureBridgeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_resistance_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIResistanceChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_strain_gage_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            initial_bridge_voltage, lead_wire_resistance, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIStrainGageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            initial_bridge_voltage, lead_wire_resistance, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_thrmcpl_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, cjc_source, cjc_val, cjc_channel):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIThrmcplChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, cjc_source, cjc_val, cjc_channel)
        check_for_error(error_code)

    def create_tedsai_thrmstr_chan_iex(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIThrmstrChanIex
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val)
        check_for_error(error_code)

    def create_tedsai_thrmstr_chan_vex(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, voltage_excit_source,
            voltage_excit_val, r_1):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIThrmstrChanVex
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, voltage_excit_source,
            voltage_excit_val, r_1)
        check_for_error(error_code)

    def create_tedsai_torque_bridge_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAITorqueBridgeChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_double,
                        ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, voltage_excit_source, voltage_excit_val,
            custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_voltage_chan(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIVoltageChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, custom_scale_name)
        check_for_error(error_code)

    def create_tedsai_voltage_chan_with_excit(
            self, task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, voltage_excit_source,
            voltage_excit_val, custom_scale_name):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIVoltageChanWithExcit
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_int, ctypes.c_double,
                        ctypes.c_double, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double, ctypes_byte_str]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel,
            terminal_config, min_val, max_val, units, voltage_excit_source,
            voltage_excit_val, custom_scale_name)
        check_for_error(error_code)

    def create_tedsairtd_chan(
            self, task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val):
        cfunc = lib_importer.windll.DAQmxCreateTEDSAIRTDChan
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double, ctypes.c_double,
                        ctypes.c_int, ctypes.c_int, ctypes.c_int,
                        ctypes.c_double]

        error_code = cfunc(
            task, physical_channel, name_to_assign_to_channel, min_val,
            max_val, units, resistance_config, current_excit_source,
            current_excit_val)
        check_for_error(error_code)

    def create_watchdog_timer_task(
            self, device_name, session_name, timeout, lines, exp_state):
        raise NotImplementedError

    def create_watchdog_timer_task_ex(
            self, device_name, session_name, timeout):
        task = lib_importer.task_handle(0)

        cfunc = lib_importer.windll.DAQmxCreateWatchdogTimerTaskEx
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes_byte_str, ctypes.c_double]

        error_code = cfunc(
            device_name, session_name, ctypes.byref(task), timeout)
        check_for_error(error_code)
        return task

    def delete_network_device(self, device_name):
        cfunc = lib_importer.windll.DAQmxDeleteNetworkDevice
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str]

        error_code = cfunc(
            device_name)
        check_for_error(error_code)

    def delete_saved_global_chan(self, channel_name):
        raise NotImplementedError

    def delete_saved_scale(self, scale_name):
        raise NotImplementedError

    def delete_saved_task(self, task_name):
        raise NotImplementedError

    def device_supports_cal(self, device_name):
        raise NotImplementedError

    def disable_ref_trig(self, task):
        cfunc = lib_importer.windll.DAQmxDisableRefTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle]

        error_code = cfunc(
            task)
        check_for_error(error_code)

    def disable_start_trig(self, task):
        cfunc = lib_importer.windll.DAQmxDisableStartTrig
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle]

        error_code = cfunc(
            task)
        check_for_error(error_code)

    def disconnect_terms(self, source_terminal, destination_terminal):
        cfunc = lib_importer.windll.DAQmxDisconnectTerms
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str]

        error_code = cfunc(
            source_terminal, destination_terminal)
        check_for_error(error_code)

    def export_signal(self, task, signal_id, output_terminal):
        cfunc = lib_importer.windll.DAQmxExportSignal
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int,
                        ctypes_byte_str]

        error_code = cfunc(
            task, signal_id, output_terminal)
        check_for_error(error_code)

    def get_ai_chan_cal_cal_date(self, task, channel_name):
        raise NotImplementedError

    def get_ai_chan_cal_exp_date(self, task, channel_name):
        raise NotImplementedError

    def get_analog_power_up_states(
            self, device_name, channel_name, channel_type):
        state = []

        args = [device_name]
        argtypes = [ctypes_byte_str]

        for index in range(len(channel_name)):
            state_element = ctypes.c_double()
            state.append(state_element)

            args.append(channel_name[index])
            argtypes.append(ctypes_byte_str)
            
            args.append(ctypes.byref(state_element))
            argtypes.append(ctypes.POINTER(ctypes.c_double))
            
            args.append(channel_type[index])
            argtypes.append(ctypes.c_int32)
            
        args.append(None)
        argtypes.append(ctypes.c_void_p)

        cfunc = lib_importer.cdll.DAQmxGetAnalogPowerUpStates
        with cfunc.arglock:
            cfunc.argtypes = argtypes
            error_code = cfunc(*args)
        check_for_error(error_code)
        return [state_element.value for state_element in state]

    def get_analog_power_up_states_with_output_type(
            self, channel_names, array_size):
        state_array = numpy.zeros(array_size, dtype=numpy.float64)
        channel_type_array = numpy.zeros(array_size, dtype=numpy.int32)

        cfunc = lib_importer.cdll.DAQmxGetAnalogPowerUpStatesWithOutputType
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, wrapped_ndpointer(dtype=numpy.float64,
                flags=('C','W')), wrapped_ndpointer(dtype=numpy.int32,
                flags=('C','W')), ctypes.c_uint, ctypes.c_uint32]

        error_code = cfunc(
            channel_names, state_array, channel_type_array, array_size)
        check_for_error(error_code)
        return state_array.tolist(), channel_type_array.tolist()

    def get_auto_configured_cdaq_sync_connections(self):
        cfunc = lib_importer.windll.DAQmxGetAutoConfiguredCDAQSyncConnections
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            port_list = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                port_list, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return port_list.value.decode('ascii')

    def get_buffer_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetBufferAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_cal_info_attribute_bool(self, device_name, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            device_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_cal_info_attribute_double(self, device_name, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            device_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_cal_info_attribute_string(self, device_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                device_name, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_cal_info_attribute_uint32(self, device_name, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            device_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_chan_attribute_bool(self, task, channel, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_chan_attribute_double(self, task, channel, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_chan_attribute_double_array(self, task, channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.float64)
            size_or_code = cfunc(
                task, channel, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_chan_attribute_int32(self, task, channel, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_chan_attribute_string(self, task, channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, channel, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_chan_attribute_uint32(self, task, channel, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_device_attribute_bool(self, device_name, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            device_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_device_attribute_double(self, device_name, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            device_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_device_attribute_double_array(self, device_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.float64)
            size_or_code = cfunc(
                device_name, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_device_attribute_int32(self, device_name, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            device_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_device_attribute_int32_array(self, device_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.int32)
            size_or_code = cfunc(
                device_name, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_device_attribute_string(self, device_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                device_name, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_device_attribute_uint32(self, device_name, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            device_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_device_attribute_uint32_array(self, device_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetDeviceAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.uint32, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.uint32)
            size_or_code = cfunc(
                device_name, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_digital_logic_family_power_up_state(self, device_name):
        logic_family = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxGetDigitalLogicFamilyPowerUpState
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            device_name, ctypes.byref(logic_family))
        check_for_error(error_code)
        return logic_family.value

    def get_digital_power_up_states(self, device_name, channel_name):
        state = []

        args = [device_name]
        argtypes = [ctypes_byte_str]

        for index in range(len(channel_name)):
            state_element = ctypes.c_int32()
            state.append(state_element)

            args.append(channel_name[index])
            argtypes.append(ctypes_byte_str)
            
            args.append(ctypes.byref(state_element))
            argtypes.append(ctypes.POINTER(ctypes.c_int32))
            
        args.append(None)
        argtypes.append(ctypes.c_void_p)

        cfunc = lib_importer.cdll.DAQmxGetDigitalPowerUpStates
        with cfunc.arglock:
            cfunc.argtypes = argtypes
            error_code = cfunc(*args)
        check_for_error(error_code)
        return [state_element.value for state_element in state]

    def get_digital_pull_up_pull_down_states(self, device_name, channel_name):
        state = []

        args = [device_name]
        argtypes = [ctypes_byte_str]

        for index in range(len(channel_name)):
            state_element = ctypes.c_int32()
            state.append(state_element)

            args.append(channel_name[index])
            argtypes.append(ctypes_byte_str)
            
            args.append(ctypes.byref(state_element))
            argtypes.append(ctypes.POINTER(ctypes.c_int32))
            
        args.append(None)
        argtypes.append(ctypes.c_void_p)

        cfunc = lib_importer.cdll.DAQmxGetDigitalPullUpPullDownStates
        with cfunc.arglock:
            cfunc.argtypes = argtypes
            error_code = cfunc(*args)
        check_for_error(error_code)
        return [state_element.value for state_element in state]

    def get_disconnected_cdaq_sync_ports(self):
        cfunc = lib_importer.windll.DAQmxGetDisconnectedCDAQSyncPorts
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            port_list = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                port_list, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return port_list.value.decode('ascii')

    def get_error_string(self, error_code):
        raise NotImplementedError

    def get_exported_signal_attribute_bool(self, task, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_exported_signal_attribute_double(self, task, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_exported_signal_attribute_int32(self, task, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_exported_signal_attribute_string(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_exported_signal_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_nth_task_channel(self, task, index):
        raise NotImplementedError

    def get_nth_task_device(self, task, index):
        raise NotImplementedError

    def get_nth_task_read_channel(self, task, index):
        raise NotImplementedError

    def get_persisted_chan_attribute_bool(self, channel, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetPersistedChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_persisted_chan_attribute_string(self, channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPersistedChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                channel, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_persisted_scale_attribute_bool(self, scale_name, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetPersistedScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            scale_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_persisted_scale_attribute_string(self, scale_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPersistedScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                scale_name, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_persisted_task_attribute_bool(self, task_name, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetPersistedTaskAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_persisted_task_attribute_string(self, task_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPersistedTaskAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task_name, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_physical_chan_attribute_bool(self, physical_channel, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            physical_channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_physical_chan_attribute_bytes(self, physical_channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.generic, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.generic)
            size_or_code = cfunc(
                physical_channel, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_physical_chan_attribute_double(self, physical_channel, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            physical_channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_physical_chan_attribute_double_array(
            self, physical_channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.float64)
            size_or_code = cfunc(
                physical_channel, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_physical_chan_attribute_int32(self, physical_channel, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            physical_channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_physical_chan_attribute_int32_array(
            self, physical_channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.int32)
            size_or_code = cfunc(
                physical_channel, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_physical_chan_attribute_string(self, physical_channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                physical_channel, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_physical_chan_attribute_uint32(self, physical_channel, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            physical_channel, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_physical_chan_attribute_uint32_array(
            self, physical_channel, attribute):
        cfunc = lib_importer.cdll.DAQmxGetPhysicalChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.uint32, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.uint32)
            size_or_code = cfunc(
                physical_channel, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_read_attribute_bool(self, task, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_read_attribute_double(self, task, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_read_attribute_int32(self, task, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_read_attribute_string(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_read_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_read_attribute_uint64(self, task, attribute):
        value = ctypes.c_uint64()

        cfunc = lib_importer.cdll.DAQmxGetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint64)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_real_time_attribute_bool(self, task, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetRealTimeAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_real_time_attribute_int32(self, task, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetRealTimeAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_real_time_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetRealTimeAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_scale_attribute_double(self, scale_name, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            scale_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_scale_attribute_double_array(self, scale_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.float64)
            size_or_code = cfunc(
                scale_name, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_scale_attribute_int32(self, scale_name, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            scale_name, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_scale_attribute_string(self, scale_name, attribute):
        cfunc = lib_importer.cdll.DAQmxGetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                scale_name, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_self_cal_last_date_and_time(self, device_name):
        raise NotImplementedError

    def get_system_info_attribute_string(self, attribute):
        cfunc = lib_importer.cdll.DAQmxGetSystemInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes.c_int32, ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_system_info_attribute_uint32(self, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetSystemInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes.c_int32, ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_task_attribute_bool(self, task, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetTaskAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_task_attribute_string(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetTaskAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_task_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetTaskAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_bool(self, task, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_double(self, task, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_ex_bool(self, task, device_names, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, device_names, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_ex_double(self, task, device_names, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, device_names, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_ex_int32(self, task, device_names, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, device_names, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_ex_string(self, task, device_names, attribute):
        cfunc = lib_importer.cdll.DAQmxGetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, device_names, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_timing_attribute_ex_uint32(self, task, device_names, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, device_names, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_ex_uint64(self, task, device_names, attribute):
        value = ctypes.c_uint64()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint64)]

        error_code = cfunc(
            task, device_names, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_int32(self, task, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_string(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_timing_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_timing_attribute_uint64(self, task, attribute):
        value = ctypes.c_uint64()

        cfunc = lib_importer.cdll.DAQmxGetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint64)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_trig_attribute_bool(self, task, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_trig_attribute_double(self, task, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_trig_attribute_double_array(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.float64)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_trig_attribute_int32(self, task, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_trig_attribute_int32_array(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = numpy.zeros(temp_size, dtype=numpy.int32)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_array_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.tolist()

    def get_trig_attribute_string(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_trig_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_watchdog_attribute_bool(self, task, lines, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, lines, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_watchdog_attribute_double(self, task, lines, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, lines, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_watchdog_attribute_int32(self, task, lines, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, lines, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_watchdog_attribute_string(self, task, lines, attribute):
        cfunc = lib_importer.cdll.DAQmxGetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_char_p, ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, lines, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_write_attribute_bool(self, task, attribute):
        value = c_bool32()

        cfunc = lib_importer.cdll.DAQmxGetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_write_attribute_double(self, task, attribute):
        value = ctypes.c_double()

        cfunc = lib_importer.cdll.DAQmxGetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_write_attribute_int32(self, task, attribute):
        value = ctypes.c_int32()

        cfunc = lib_importer.cdll.DAQmxGetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_int32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_write_attribute_string(self, task, attribute):
        cfunc = lib_importer.cdll.DAQmxGetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_char_p,
                ctypes.c_uint]

        temp_size = 0
        while True:
            value = ctypes.create_string_buffer(temp_size)
            size_or_code = cfunc(
                task, attribute, value, temp_size)
            if is_string_buffer_too_small(size_or_code):
                # Buffer size must have changed between calls; check again.
                temp_size = 0
            elif size_or_code > 0 and temp_size == 0:
                # Buffer size obtained, use to retrieve data.
                temp_size = size_or_code
            else:
                break
        check_for_error(size_or_code)
        return value.value.decode('ascii')

    def get_write_attribute_uint32(self, task, attribute):
        value = ctypes.c_uint32()

        cfunc = lib_importer.cdll.DAQmxGetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint32)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def get_write_attribute_uint64(self, task, attribute):
        value = ctypes.c_uint64()

        cfunc = lib_importer.cdll.DAQmxGetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                ctypes.POINTER(ctypes.c_uint64)]

        error_code = cfunc(
            task, attribute, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def is_task_done(self, task):
        is_task_done = c_bool32()

        cfunc = lib_importer.windll.DAQmxIsTaskDone
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.POINTER(c_bool32)]

        error_code = cfunc(
            task, ctypes.byref(is_task_done))
        check_for_error(error_code)
        return is_task_done.value

    def load_task(self, session_name):
        task = lib_importer.task_handle(0)

        cfunc = lib_importer.windll.DAQmxLoadTask
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str]

        error_code = cfunc(
            session_name, ctypes.byref(task))
        check_for_error(error_code)
        return task

    def read_analog_f64(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.float64)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadAnalogF64
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_analog_scalar_f64(self, task, timeout):
        value = ctypes.c_double()

        cfunc = lib_importer.windll.DAQmxReadAnalogScalarF64
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, timeout, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def read_binary_i16(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.int16)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadBinaryI16
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.int16, flags=('C','W')),
                        ctypes.c_uint, ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_binary_i32(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.int32)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadBinaryI32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                        ctypes.c_uint, ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_binary_u16(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.uint16)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadBinaryU16
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint16,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_binary_u32(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.uint32)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadBinaryU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_counter_f64(self, task, num_samps_per_chan, timeout):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.float64)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadCounterF64
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_counter_f64_ex(
            self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.float64)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadCounterF64Ex
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_counter_scalar_f64(self, task, timeout):
        value = ctypes.c_double()

        cfunc = lib_importer.windll.DAQmxReadCounterScalarF64
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, timeout, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def read_counter_scalar_u32(self, task, timeout):
        value = ctypes.c_uint()

        cfunc = lib_importer.windll.DAQmxReadCounterScalarU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_uint)]

        error_code = cfunc(
            task, timeout, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def read_counter_u32(self, task, num_samps_per_chan, timeout):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.uint32)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadCounterU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_counter_u32_ex(
            self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.uint32)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadCounterU32Ex
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_ctr_freq(self, task, num_samps_per_chan, timeout, interleaved):
        read_array_frequency = numpy.zeros(array_size_in_samps, dtype=numpy.float64)
        read_array_duty_cycle = numpy.zeros(array_size_in_samps, dtype=numpy.float64)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadCtrFreq
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')),
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, interleaved,
            read_array_frequency, read_array_duty_cycle,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array_frequency.tolist(), read_array_duty_cycle.tolist(), samps_per_chan_read.value

    def read_ctr_freq_scalar(self, task, timeout):
        frequency = ctypes.c_double()
        duty_cycle = ctypes.c_double()

        cfunc = lib_importer.windll.DAQmxReadCtrFreqScalar
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_double),
                        ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, timeout, ctypes.byref(frequency), ctypes.byref(duty_cycle))
        check_for_error(error_code)
        return frequency.value, duty_cycle.value

    def read_ctr_ticks(self, task, num_samps_per_chan, timeout, interleaved):
        read_array_high_ticks = numpy.zeros(array_size_in_samps, dtype=numpy.uint32)
        read_array_low_ticks = numpy.zeros(array_size_in_samps, dtype=numpy.uint32)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadCtrTicks
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')),
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, interleaved,
            read_array_high_ticks, read_array_low_ticks,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array_high_ticks.tolist(), read_array_low_ticks.tolist(), samps_per_chan_read.value

    def read_ctr_ticks_scalar(self, task, timeout):
        high_ticks = ctypes.c_uint()
        low_ticks = ctypes.c_uint()

        cfunc = lib_importer.windll.DAQmxReadCtrTicksScalar
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_uint),
                        ctypes.POINTER(ctypes.c_uint)]

        error_code = cfunc(
            task, timeout, ctypes.byref(high_ticks), ctypes.byref(low_ticks))
        check_for_error(error_code)
        return high_ticks.value, low_ticks.value

    def read_ctr_time(self, task, num_samps_per_chan, timeout, interleaved):
        read_array_high_time = numpy.zeros(array_size_in_samps, dtype=numpy.float64)
        read_array_low_time = numpy.zeros(array_size_in_samps, dtype=numpy.float64)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadCtrTime
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')),
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, interleaved,
            read_array_high_time, read_array_low_time,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array_high_time.tolist(), read_array_low_time.tolist(), samps_per_chan_read.value

    def read_ctr_time_scalar(self, task, timeout):
        high_time = ctypes.c_double()
        low_time = ctypes.c_double()

        cfunc = lib_importer.windll.DAQmxReadCtrTimeScalar
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_double),
                        ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, timeout, ctypes.byref(high_time), ctypes.byref(low_time))
        check_for_error(error_code)
        return high_time.value, low_time.value

    def read_digital_lines(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_bytes, dtype=numpy.uint8)
        samps_per_chan_read = ctypes.c_int()
        num_bytes_per_samp = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadDigitalLines
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint8, flags=('C','W')),
                        ctypes.c_uint, ctypes.POINTER(ctypes.c_int),
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read),
            ctypes.byref(num_bytes_per_samp))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value, num_bytes_per_samp.value

    def read_digital_scalar_u32(self, task, timeout):
        value = ctypes.c_uint()

        cfunc = lib_importer.windll.DAQmxReadDigitalScalarU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_uint)]

        error_code = cfunc(
            task, timeout, ctypes.byref(value))
        check_for_error(error_code)
        return value.value

    def read_digital_u16(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.uint16)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadDigitalU16
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint16,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_digital_u32(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.uint32)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadDigitalU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.c_uint,
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_digital_u8(self, task, num_samps_per_chan, timeout, fill_mode):
        read_array = numpy.zeros(array_size_in_samps, dtype=numpy.uint8)
        samps_per_chan_read = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxReadDigitalU8
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint8, flags=('C','W')),
                        ctypes.c_uint, ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, timeout, fill_mode, read_array,
            ctypes.byref(samps_per_chan_read))
        check_for_error(error_code)
        return read_array.tolist(), samps_per_chan_read.value

    def read_power_binary_i16(
            self, task, num_samps_per_chan, timeout, fill_mode,
            array_size_in_samps):
        raise NotImplementedError

    def read_power_f64(
            self, task, num_samps_per_chan, timeout, fill_mode,
            array_size_in_samps):
        raise NotImplementedError

    def read_power_scalar_f64(self, task, timeout):
        voltage = ctypes.c_double()
        current = ctypes.c_double()

        cfunc = lib_importer.windll.DAQmxReadPowerScalarF64
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_double, ctypes.POINTER(ctypes.c_double),
                        ctypes.POINTER(ctypes.c_double)]

        error_code = cfunc(
            task, timeout, ctypes.byref(voltage), ctypes.byref(current))
        check_for_error(error_code)
        return voltage.value, current.value

    def read_raw(self, task, num_samps_per_chan, timeout, array_size_in_bytes):
        raise NotImplementedError

    def register_done_event(
            self, task, options, callback_function, callback_data):

        DAQmxDoneEventCallbackPtr = ctypes.CFUNCTYPE(
            lib_importer.task_handle, ctypes.c_int)        
        
        cfunc = lib_importer.windll.DAQmxRegisterDoneEvent
        
        with cfunc.arglock:
            if callback_function is not None:
                callback_method_ptr = DAQmxDoneEventCallbackPtr(callback_function)
                self._done_event_callbacks.append(callback_method_ptr)
                cfunc.argtypes = [
                    lib_importer.task_handle, ctypes.c_uint,
                    DAQmxDoneEventCallbackPtr, ctypes.c_void_p]
            else:
                del self._done_event_callbacks[:]
                callback_method_ptr = None
                cfunc.argtypes = [
                    lib_importer.task_handle, ctypes.c_uint, ctypes.c_void_p,
                    ctypes.c_void_p]
        
            error_code = cfunc(
                task, options, callback_function, callback_data)
        check_for_error(error_code)


    def register_every_n_samples_event(
            self, task, every_n_samples_event_type, n_samples, options,
            callback_function, callback_data):

        DAQmxEveryNSamplesEventCallbackPtr = ctypes.CFUNCTYPE(
            lib_importer.task_handle, ctypes.c_int, ctypes.c_uint)        
        
        cfunc = lib_importer.windll.DAQmxRegisterEveryNSamplesEvent
        
        with cfunc.arglock:
            if callback_function is not None:
                callback_method_ptr = DAQmxEveryNSamplesEventCallbackPtr(callback_function)
                self._every_n_samples_event_callbacks.append(callback_method_ptr)
                cfunc.argtypes = [
                    lib_importer.task_handle, ctypes.c_int, ctypes.c_uint,
                    ctypes.c_uint, DAQmxEveryNSamplesEventCallbackPtr,
                    ctypes.c_void_p]
            else:
                del self._every_n_samples_event_callbacks[:]
                callback_method_ptr = None
                cfunc.argtypes = [
                    lib_importer.task_handle, ctypes.c_int, ctypes.c_uint,
                    ctypes.c_uint, ctypes.c_void_p, ctypes.c_void_p]
        
            error_code = cfunc(
                task, every_n_samples_event_type, n_samples, options,
                callback_function, callback_data)
        check_for_error(error_code)


    def register_signal_event(
            self, task, signal_id, options, callback_function, callback_data):

        DAQmxSignalEventCallbackPtr = ctypes.CFUNCTYPE(
            lib_importer.task_handle, ctypes.c_int)        
        
        cfunc = lib_importer.windll.DAQmxRegisterSignalEvent
        
        with cfunc.arglock:
            if callback_function is not None:
                callback_method_ptr = DAQmxSignalEventCallbackPtr(callback_function)
                self._signal_event_callbacks.append(callback_method_ptr)
                cfunc.argtypes = [
                    lib_importer.task_handle, ctypes.c_int, ctypes.c_uint,
                    DAQmxSignalEventCallbackPtr, ctypes.c_void_p]
            else:
                del self._signal_event_callbacks[:]
                callback_method_ptr = None
                cfunc.argtypes = [
                    lib_importer.task_handle, ctypes.c_int, ctypes.c_uint,
                    ctypes.c_void_p, ctypes.c_void_p]
        
            error_code = cfunc(
                task, signal_id, options, callback_function, callback_data)
        check_for_error(error_code)


    def remove_cdaq_sync_connection(self, port_list):
        cfunc = lib_importer.windll.DAQmxRemoveCDAQSyncConnection
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str]

        error_code = cfunc(
            port_list)
        check_for_error(error_code)

    def reserve_network_device(self, device_name, override_reservation):
        cfunc = lib_importer.windll.DAQmxReserveNetworkDevice
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str, c_bool32]

        error_code = cfunc(
            device_name, override_reservation)
        check_for_error(error_code)

    def reset_buffer_attribute(self, task, attribute):
        cfunc = lib_importer.windll.DAQmxResetBufferAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int32]

        error_code = cfunc(
            task, attribute)
        check_for_error(error_code)

    def reset_chan_attribute(self, task, channel, attribute):
        cfunc = lib_importer.windll.DAQmxResetChanAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int32]

        error_code = cfunc(
            task, channel, attribute)
        check_for_error(error_code)

    def reset_device(self, device_name):
        cfunc = lib_importer.windll.DAQmxResetDevice
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str]

        error_code = cfunc(
            device_name)
        check_for_error(error_code)

    def reset_exported_signal_attribute(self, task, attribute):
        cfunc = lib_importer.windll.DAQmxResetExportedSignalAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int]

        error_code = cfunc(
            task, attribute)
        check_for_error(error_code)

    def reset_read_attribute(self, task, attribute):
        cfunc = lib_importer.windll.DAQmxResetReadAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int]

        error_code = cfunc(
            task, attribute)
        check_for_error(error_code)

    def reset_real_time_attribute(self, task, attribute):
        cfunc = lib_importer.windll.DAQmxResetRealTimeAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int32]

        error_code = cfunc(
            task, attribute)
        check_for_error(error_code)

    def reset_timing_attribute(self, task, attribute):
        cfunc = lib_importer.windll.DAQmxResetTimingAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int]

        error_code = cfunc(
            task, attribute)
        check_for_error(error_code)

    def reset_timing_attribute_ex(self, task, device_names, attribute):
        cfunc = lib_importer.windll.DAQmxResetTimingAttributeEx
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int]

        error_code = cfunc(
            task, device_names, attribute)
        check_for_error(error_code)

    def reset_trig_attribute(self, task, attribute):
        cfunc = lib_importer.windll.DAQmxResetTrigAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int]

        error_code = cfunc(
            task, attribute)
        check_for_error(error_code)

    def reset_watchdog_attribute(self, task, lines, attribute):
        cfunc = lib_importer.windll.DAQmxResetWatchdogAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str,
                        ctypes.c_int]

        error_code = cfunc(
            task, lines, attribute)
        check_for_error(error_code)

    def reset_write_attribute(self, task, attribute):
        cfunc = lib_importer.windll.DAQmxResetWriteAttribute
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int]

        error_code = cfunc(
            task, attribute)
        check_for_error(error_code)

    def save_global_chan(self, task, channel_name, save_as, author, options):
        raise NotImplementedError

    def save_scale(self, scale_name, save_as, author, options):
        raise NotImplementedError

    def save_task(self, task, save_as, author, options):
        raise NotImplementedError

    def self_cal(self, device_name):
        raise NotImplementedError

    def self_test_device(self, device_name):
        cfunc = lib_importer.windll.DAQmxSelfTestDevice
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str]

        error_code = cfunc(
            device_name)
        check_for_error(error_code)

    def set_ai_chan_cal_cal_date(
            self, task, channel_name, year, month, day, hour, minute):
        raise NotImplementedError

    def set_ai_chan_cal_exp_date(
            self, task, channel_name, year, month, day, hour, minute):
        raise NotImplementedError

    def set_analog_power_up_states(
            self, device_name, channel_names, state, channel_type):
        args = [device_name]
        argtypes = [ctypes_byte_str]

        for index in range(len(channel_names)):

            args.append(channel_names[index])
            argtypes.append(ctypes_byte_str)
            
            args.append(state[index])
            argtypes.append(ctypes.c_double)
            
            args.append(channel_type[index])
            argtypes.append(ctypes.c_int32)
            
        args.append(None)
        argtypes.append(ctypes.c_void_p)

        cfunc = lib_importer.cdll.DAQmxSetAnalogPowerUpStates
        with cfunc.arglock:
            cfunc.argtypes = argtypes
            error_code = cfunc(*args)
        check_for_error(error_code)

    def set_analog_power_up_states_with_output_type(
            self, channel_names, state_array, channel_type_array, array_size):
        cfunc = lib_importer.cdll.DAQmxSetAnalogPowerUpStatesWithOutputType
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, wrapped_ndpointer(dtype=numpy.float64,
                flags=('C','W')), wrapped_ndpointer(dtype=numpy.int32,
                flags=('C','W')), ctypes.c_uint, ctypes.c_uint32]

        error_code = cfunc(
            channel_names, state_array, channel_type_array,
            len(channel_type_array), array_size)
        check_for_error(error_code)

    def set_buffer_attribute_uint32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetBufferAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_cal_info_attribute_bool(self, device_name, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, c_bool32]

        error_code = cfunc(
            device_name, attribute, value)
        check_for_error(error_code)

    def set_cal_info_attribute_double(self, device_name, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_double]

        error_code = cfunc(
            device_name, attribute, value)
        check_for_error(error_code)

    def set_cal_info_attribute_string(self, device_name, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes_byte_str]

        error_code = cfunc(
            device_name, attribute, value)
        check_for_error(error_code)

    def set_cal_info_attribute_uint32(self, device_name, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetCalInfoAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            device_name, attribute, value)
        check_for_error(error_code)

    def set_chan_attribute_bool(self, task, channel, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                c_bool32]

        error_code = cfunc(
            task, channel, attribute, value)
        check_for_error(error_code)

    def set_chan_attribute_double(self, task, channel, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_double]

        error_code = cfunc(
            task, channel, attribute, value)
        check_for_error(error_code)

    def set_chan_attribute_double_array(
            self, task, channel, attribute, value, size):
        cfunc = lib_importer.cdll.DAQmxSetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint, ctypes.c_uint32]

        error_code = cfunc(
            task, channel, attribute, value, len(value), size)
        check_for_error(error_code)

    def set_chan_attribute_int32(self, task, channel, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_int32]

        error_code = cfunc(
            task, channel, attribute, value)
        check_for_error(error_code)

    def set_chan_attribute_string(self, task, channel, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes_byte_str]

        error_code = cfunc(
            task, channel, attribute, value)
        check_for_error(error_code)

    def set_chan_attribute_uint32(self, task, channel, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetChanAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_uint32]

        error_code = cfunc(
            task, channel, attribute, value)
        check_for_error(error_code)

    def set_digital_logic_family_power_up_state(
            self, device_name, logic_family):
        cfunc = lib_importer.windll.DAQmxSetDigitalLogicFamilyPowerUpState
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            device_name, logic_family)
        check_for_error(error_code)

    def set_digital_power_up_states(self, device_name, channel_names, state):
        args = [device_name]
        argtypes = [ctypes_byte_str]

        for index in range(len(channel_names)):

            args.append(channel_names[index])
            argtypes.append(ctypes_byte_str)
            
            args.append(state[index])
            argtypes.append(ctypes.c_int32)
            
        args.append(None)
        argtypes.append(ctypes.c_void_p)

        cfunc = lib_importer.cdll.DAQmxSetDigitalPowerUpStates
        with cfunc.arglock:
            cfunc.argtypes = argtypes
            error_code = cfunc(*args)
        check_for_error(error_code)

    def set_digital_pull_up_pull_down_states(
            self, device_name, channel_names, state):
        args = [device_name]
        argtypes = [ctypes_byte_str]

        for index in range(len(channel_names)):

            args.append(channel_names[index])
            argtypes.append(ctypes_byte_str)
            
            args.append(state[index])
            argtypes.append(ctypes.c_int32)
            
        args.append(None)
        argtypes.append(ctypes.c_void_p)

        cfunc = lib_importer.cdll.DAQmxSetDigitalPullUpPullDownStates
        with cfunc.arglock:
            cfunc.argtypes = argtypes
            error_code = cfunc(*args)
        check_for_error(error_code)

    def set_exported_signal_attribute_bool(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, c_bool32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_exported_signal_attribute_double(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_double]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_exported_signal_attribute_int32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_int32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_exported_signal_attribute_string(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes_byte_str]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_exported_signal_attribute_uint32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetExportedSignalAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_read_attribute_bool(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, c_bool32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_read_attribute_double(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_double]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_read_attribute_int32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_int32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_read_attribute_string(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes_byte_str]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_read_attribute_uint32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_read_attribute_uint64(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetReadAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint64]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_real_time_attribute_bool(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetRealTimeAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, c_bool32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_real_time_attribute_int32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetRealTimeAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_int32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_real_time_attribute_uint32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetRealTimeAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_scale_attribute_double(self, scale_name, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_double]

        error_code = cfunc(
            scale_name, attribute, value)
        check_for_error(error_code)

    def set_scale_attribute_double_array(
            self, scale_name, attribute, value, size):
        cfunc = lib_importer.cdll.DAQmxSetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint, ctypes.c_uint32]

        error_code = cfunc(
            scale_name, attribute, value, len(value), size)
        check_for_error(error_code)

    def set_scale_attribute_int32(self, scale_name, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes.c_int32]

        error_code = cfunc(
            scale_name, attribute, value)
        check_for_error(error_code)

    def set_scale_attribute_string(self, scale_name, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetScaleAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                ctypes_byte_str, ctypes.c_int32, ctypes_byte_str]

        error_code = cfunc(
            scale_name, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_bool(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, c_bool32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_double(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_double]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_ex_bool(
            self, task, device_names, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                c_bool32]

        error_code = cfunc(
            task, device_names, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_ex_double(
            self, task, device_names, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_double]

        error_code = cfunc(
            task, device_names, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_ex_int32(
            self, task, device_names, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_int32]

        error_code = cfunc(
            task, device_names, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_ex_string(
            self, task, device_names, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes_byte_str]

        error_code = cfunc(
            task, device_names, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_ex_uint32(
            self, task, device_names, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_uint32]

        error_code = cfunc(
            task, device_names, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_ex_uint64(
            self, task, device_names, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttributeEx
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_uint64]

        error_code = cfunc(
            task, device_names, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_int32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_int32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_string(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes_byte_str]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_uint32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_timing_attribute_uint64(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTimingAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint64]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_trig_attribute_bool(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, c_bool32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_trig_attribute_double(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_double]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_trig_attribute_double_array(self, task, attribute, value, size):
        cfunc = lib_importer.cdll.DAQmxSetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.float64, flags=('C','W')),
                ctypes.c_uint, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value, len(value), size)
        check_for_error(error_code)

    def set_trig_attribute_int32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_int32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_trig_attribute_int32_array(self, task, attribute, value, size):
        cfunc = lib_importer.cdll.DAQmxSetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32,
                wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                ctypes.c_uint, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value, len(value), size)
        check_for_error(error_code)

    def set_trig_attribute_string(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes_byte_str]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_trig_attribute_uint32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetTrigAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_watchdog_attribute_bool(self, task, lines, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                c_bool32]

        error_code = cfunc(
            task, lines, attribute, value)
        check_for_error(error_code)

    def set_watchdog_attribute_double(self, task, lines, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_double]

        error_code = cfunc(
            task, lines, attribute, value)
        check_for_error(error_code)

    def set_watchdog_attribute_int32(self, task, lines, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes.c_int32]

        error_code = cfunc(
            task, lines, attribute, value)
        check_for_error(error_code)

    def set_watchdog_attribute_string(self, task, lines, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWatchdogAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes_byte_str, ctypes.c_int32,
                ctypes_byte_str]

        error_code = cfunc(
            task, lines, attribute, value)
        check_for_error(error_code)

    def set_write_attribute_bool(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, c_bool32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_write_attribute_double(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_double]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_write_attribute_int32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_int32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_write_attribute_string(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes_byte_str]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_write_attribute_uint32(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint32]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def set_write_attribute_uint64(self, task, attribute, value):
        cfunc = lib_importer.cdll.DAQmxSetWriteAttribute
        with cfunc.arglock:
            cfunc.argtypes = [
                lib_importer.task_handle, ctypes.c_int32, ctypes.c_uint64]

        error_code = cfunc(
            task, attribute, value)
        check_for_error(error_code)

    def start_new_file(self, task, file_path):
        cfunc = lib_importer.windll.DAQmxStartNewFile
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes_byte_str]

        error_code = cfunc(
            task, file_path)
        check_for_error(error_code)

    def start_task(self, task):
        cfunc = lib_importer.windll.DAQmxStartTask
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle]

        error_code = cfunc(
            task)
        check_for_error(error_code)

    def stop_task(self, task):
        cfunc = lib_importer.windll.DAQmxStopTask
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle]

        error_code = cfunc(
            task)
        check_for_error(error_code)

    def task_control(self, task, action):
        cfunc = lib_importer.windll.DAQmxTaskControl
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_int]

        error_code = cfunc(
            task, action)
        check_for_error(error_code)

    def tristate_output_term(self, output_terminal):
        cfunc = lib_importer.windll.DAQmxTristateOutputTerm
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str]

        error_code = cfunc(
            output_terminal)
        check_for_error(error_code)

    def unreserve_network_device(self, device_name):
        cfunc = lib_importer.windll.DAQmxUnreserveNetworkDevice
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str]

        error_code = cfunc(
            device_name)
        check_for_error(error_code)

    def wait_for_next_sample_clock(self, task, timeout):
        raise NotImplementedError

    def wait_for_valid_timestamp(self, task, timestamp_event, timeout):
        raise NotImplementedError

    def wait_until_task_done(self, task, time_to_wait):
        cfunc = lib_importer.windll.DAQmxWaitUntilTaskDone
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        lib_importer.task_handle, ctypes.c_double]

        error_code = cfunc(
            task, time_to_wait)
        check_for_error(error_code)

    def write_analog_f64(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteAnalogF64
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_analog_scalar_f64(self, task, auto_start, timeout, value):
        cfunc = lib_importer.windll.DAQmxWriteAnalogScalarF64
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        c_bool32, ctypes.c_double, ctypes.c_double]

        error_code = cfunc(
            task, auto_start, timeout, value)
        check_for_error(error_code)

    def write_binary_i16(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteBinaryI16
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.int16, flags=('C','W')),
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_binary_i32(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteBinaryI32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.int32, flags=('C','W')),
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_binary_u16(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteBinaryU16
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint16,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_binary_u32(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteBinaryU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_ctr_freq(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            frequency, duty_cycle):
        num_samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteCtrFreq
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')),
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            frequency, duty_cycle, ctypes.byref(num_samps_per_chan_written))
        check_for_error(error_code)
        return num_samps_per_chan_written.value

    def write_ctr_freq_scalar(
            self, task, auto_start, timeout, frequency, duty_cycle):
        cfunc = lib_importer.windll.DAQmxWriteCtrFreqScalar
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        c_bool32, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double]

        error_code = cfunc(
            task, auto_start, timeout, frequency, duty_cycle)
        check_for_error(error_code)

    def write_ctr_ticks(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            high_ticks, low_ticks):
        num_samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteCtrTicks
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')),
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            high_ticks, low_ticks, ctypes.byref(num_samps_per_chan_written))
        check_for_error(error_code)
        return num_samps_per_chan_written.value

    def write_ctr_ticks_scalar(
            self, task, auto_start, timeout, high_ticks, low_ticks):
        cfunc = lib_importer.windll.DAQmxWriteCtrTicksScalar
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        c_bool32, ctypes.c_double, ctypes.c_uint,
                        ctypes.c_uint]

        error_code = cfunc(
            task, auto_start, timeout, high_ticks, low_ticks)
        check_for_error(error_code)

    def write_ctr_time(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            high_time, low_time):
        num_samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteCtrTime
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')),
                        wrapped_ndpointer(dtype=numpy.float64,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            high_time, low_time, ctypes.byref(num_samps_per_chan_written))
        check_for_error(error_code)
        return num_samps_per_chan_written.value

    def write_ctr_time_scalar(
            self, task, auto_start, timeout, high_time, low_time):
        cfunc = lib_importer.windll.DAQmxWriteCtrTimeScalar
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        c_bool32, ctypes.c_double, ctypes.c_double,
                        ctypes.c_double]

        error_code = cfunc(
            task, auto_start, timeout, high_time, low_time)
        check_for_error(error_code)

    def write_digital_lines(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteDigitalLines
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint8, flags=('C','W')),
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_digital_scalar_u32(self, task, auto_start, timeout, value):
        cfunc = lib_importer.windll.DAQmxWriteDigitalScalarU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        c_bool32, ctypes.c_double, ctypes.c_uint]

        error_code = cfunc(
            task, auto_start, timeout, value)
        check_for_error(error_code)

    def write_digital_u16(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteDigitalU16
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint16,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_digital_u32(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteDigitalU32
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint32,
                        flags=('C','W')), ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_digital_u8(
            self, task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array):
        samps_per_chan_written = ctypes.c_int()

        cfunc = lib_importer.windll.DAQmxWriteDigitalU8
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes.c_int, c_bool32, ctypes.c_double, ctypes.c_int,
                        wrapped_ndpointer(dtype=numpy.uint8, flags=('C','W')),
                        ctypes.POINTER(ctypes.c_int)]

        error_code = cfunc(
            task, num_samps_per_chan, auto_start, timeout, data_layout,
            write_array, ctypes.byref(samps_per_chan_written))
        check_for_error(error_code)
        return samps_per_chan_written.value

    def write_raw(self, task, num_samps, auto_start, timeout, write_array):
        raise NotImplementedError

    def write_to_teds_from_array(
            self, physical_channel, bit_stream, basic_teds_options):
        cfunc = lib_importer.windll.DAQmxWriteToTEDSFromArray
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, wrapped_ndpointer(dtype=numpy.uint8,
                        flags=('C','W')), ctypes.c_uint, ctypes.c_int]

        error_code = cfunc(
            physical_channel, bit_stream, len(bit_stream), basic_teds_options)
        check_for_error(error_code)

    def write_to_teds_from_file(
            self, physical_channel, file_path, basic_teds_options):
        cfunc = lib_importer.windll.DAQmxWriteToTEDSFromFile
        if cfunc.argtypes is None:
            with cfunc.arglock:
                if cfunc.argtypes is None:
                    cfunc.argtypes = [
                        ctypes_byte_str, ctypes_byte_str, ctypes.c_int]

        error_code = cfunc(
            physical_channel, file_path, basic_teds_options)
        check_for_error(error_code)
