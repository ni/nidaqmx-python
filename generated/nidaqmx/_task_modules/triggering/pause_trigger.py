# Do not edit this file; it was automatically generated.

import ctypes
import numpy

from nidaqmx._lib import (
    lib_importer, wrapped_ndpointer, ctypes_byte_str, c_bool32)
from nidaqmx.system.physical_channel import PhysicalChannel
from nidaqmx.errors import (
    check_for_error, is_string_buffer_too_small, is_array_buffer_too_small)
from nidaqmx.constants import (
    ActiveLevel, Coupling, DigitalPatternCondition, Level, TriggerType,
    WindowTriggerCondition2)


class PauseTrigger:
    """
    Represents the pause trigger configurations for a DAQmx task.
    """
    def __init__(self, task_handle, interpreter):
        self._handle = task_handle
        self._interpreter = interpreter

    @property
    def anlg_lvl_coupling(self):
        """
        :class:`nidaqmx.constants.Coupling`: Specifies the coupling for
            the source signal of the trigger if the source is a terminal
            rather than a virtual channel.
        """


        val = self._interpreter.get_trig_attribute_int32(
                self._handle, 8758)
        return Coupling(val)

    @anlg_lvl_coupling.setter
    def anlg_lvl_coupling(self, val):
        val = val.value
        self._interpreter.set_trig_attribute_int32(
                self._handle, 8758, val)

    @anlg_lvl_coupling.deleter
    def anlg_lvl_coupling(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8758)

    @property
    def anlg_lvl_dig_fltr_enable(self):
        """
        bool: Specifies whether to apply a digital filter to the digital
            output of the analog triggering circuitry (the Analog
            Comparison Event). When enabled, the analog signal must stay
            above or below the trigger level for the minimum pulse width
            before being recognized. Use filtering  for noisy trigger
            signals that transition in and out of the hysteresis window
            rapidly.
        """


        val = self._interpreter.get_trig_attribute_bool(
                self._handle, 12016)
        return val

    @anlg_lvl_dig_fltr_enable.setter
    def anlg_lvl_dig_fltr_enable(self, val):
        self._interpreter.set_trig_attribute_bool(
                self._handle, 12016, val)

    @anlg_lvl_dig_fltr_enable.deleter
    def anlg_lvl_dig_fltr_enable(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12016)

    @property
    def anlg_lvl_dig_fltr_min_pulse_width(self):
        """
        float: Specifies in seconds the minimum pulse width the filter
            recognizes.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 12017)
        return val

    @anlg_lvl_dig_fltr_min_pulse_width.setter
    def anlg_lvl_dig_fltr_min_pulse_width(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 12017, val)

    @anlg_lvl_dig_fltr_min_pulse_width.deleter
    def anlg_lvl_dig_fltr_min_pulse_width(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12017)

    @property
    def anlg_lvl_dig_fltr_timebase_rate(self):
        """
        float: Specifies in hertz the rate of the digital filter
            timebase. NI-DAQmx uses this value to compute settings for
            the filter.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 12019)
        return val

    @anlg_lvl_dig_fltr_timebase_rate.setter
    def anlg_lvl_dig_fltr_timebase_rate(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 12019, val)

    @anlg_lvl_dig_fltr_timebase_rate.deleter
    def anlg_lvl_dig_fltr_timebase_rate(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12019)

    @property
    def anlg_lvl_dig_fltr_timebase_src(self):
        """
        str: Specifies the terminal of the signal to use as the timebase
            of the digital filter.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 12018)
        return val

    @anlg_lvl_dig_fltr_timebase_src.setter
    def anlg_lvl_dig_fltr_timebase_src(self, val):
        self._interpreter.set_trig_attribute_string(
                self._handle, 12018, val)

    @anlg_lvl_dig_fltr_timebase_src.deleter
    def anlg_lvl_dig_fltr_timebase_src(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12018)

    @property
    def anlg_lvl_dig_sync_enable(self):
        """
        bool: Specifies whether to synchronize recognition of
            transitions in the signal to the internal timebase of the
            device.
        """


        val = self._interpreter.get_trig_attribute_bool(
                self._handle, 12020)
        return val

    @anlg_lvl_dig_sync_enable.setter
    def anlg_lvl_dig_sync_enable(self, val):
        self._interpreter.set_trig_attribute_bool(
                self._handle, 12020, val)

    @anlg_lvl_dig_sync_enable.deleter
    def anlg_lvl_dig_sync_enable(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12020)

    @property
    def anlg_lvl_hyst(self):
        """
        float: Specifies a hysteresis level in the units of the
            measurement or generation. If **anlg_lvl_when** is
            **ActiveLevel.ABOVE**, the trigger does not deassert until
            the source signal passes below **anlg_lvl_lvl** minus the
            hysteresis. If **anlg_lvl_when** is **ActiveLevel.BELOW**,
            the trigger does not deassert until the source signal passes
            above **anlg_lvl_lvl** plus the hysteresis. Hysteresis is
            always enabled. Set this property to a non-zero value to use
            hysteresis.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 4968)
        return val

    @anlg_lvl_hyst.setter
    def anlg_lvl_hyst(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 4968, val)

    @anlg_lvl_hyst.deleter
    def anlg_lvl_hyst(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4968)

    @property
    def anlg_lvl_lvl(self):
        """
        float: Specifies the threshold at which to pause the task.
            Specify this value in the units of the measurement or
            generation. Use **anlg_lvl_when** to specify whether the
            task pauses above or below this threshold.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 4969)
        return val

    @anlg_lvl_lvl.setter
    def anlg_lvl_lvl(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 4969, val)

    @anlg_lvl_lvl.deleter
    def anlg_lvl_lvl(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4969)

    @property
    def anlg_lvl_src(self):
        """
        str: Specifies the name of a virtual channel or terminal where
            there is an analog signal to use as the source of the
            trigger.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 4976)
        return val

    @anlg_lvl_src.setter
    def anlg_lvl_src(self, val):
        self._interpreter.set_trig_attribute_string(
                self._handle, 4976, val)

    @anlg_lvl_src.deleter
    def anlg_lvl_src(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4976)

    @property
    def anlg_lvl_when(self):
        """
        :class:`nidaqmx.constants.ActiveLevel`: Specifies whether the
            task pauses above or below the threshold you specify with
            **anlg_lvl_lvl**.
        """


        val = self._interpreter.get_trig_attribute_int32(
                self._handle, 4977)
        return ActiveLevel(val)

    @anlg_lvl_when.setter
    def anlg_lvl_when(self, val):
        val = val.value
        self._interpreter.set_trig_attribute_int32(
                self._handle, 4977, val)

    @anlg_lvl_when.deleter
    def anlg_lvl_when(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4977)

    @property
    def anlg_win_btm(self):
        """
        float: Specifies the lower limit of the window. Specify this
            value in the units of the measurement or generation.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 4981)
        return val

    @anlg_win_btm.setter
    def anlg_win_btm(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 4981, val)

    @anlg_win_btm.deleter
    def anlg_win_btm(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4981)

    @property
    def anlg_win_coupling(self):
        """
        :class:`nidaqmx.constants.Coupling`: Specifies the coupling for
            the source signal of the terminal if the source is a
            terminal rather than a virtual channel.
        """


        val = self._interpreter.get_trig_attribute_int32(
                self._handle, 8759)
        return Coupling(val)

    @anlg_win_coupling.setter
    def anlg_win_coupling(self, val):
        val = val.value
        self._interpreter.set_trig_attribute_int32(
                self._handle, 8759, val)

    @anlg_win_coupling.deleter
    def anlg_win_coupling(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8759)

    @property
    def anlg_win_dig_fltr_enable(self):
        """
        bool: Specifies whether to apply a digital filter to the digital
            output of the analog triggering circuitry (the Analog
            Comparison Event). When enabled, the analog signal must stay
            within the trigger window for the minimum pulse width before
            being recognized. Use filtering for noisy trigger signals
            that transition in and out of the window rapidly.
        """


        val = self._interpreter.get_trig_attribute_bool(
                self._handle, 12021)
        return val

    @anlg_win_dig_fltr_enable.setter
    def anlg_win_dig_fltr_enable(self, val):
        self._interpreter.set_trig_attribute_bool(
                self._handle, 12021, val)

    @anlg_win_dig_fltr_enable.deleter
    def anlg_win_dig_fltr_enable(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12021)

    @property
    def anlg_win_dig_fltr_min_pulse_width(self):
        """
        float: Specifies in seconds the minimum pulse width the filter
            recognizes.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 12022)
        return val

    @anlg_win_dig_fltr_min_pulse_width.setter
    def anlg_win_dig_fltr_min_pulse_width(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 12022, val)

    @anlg_win_dig_fltr_min_pulse_width.deleter
    def anlg_win_dig_fltr_min_pulse_width(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12022)

    @property
    def anlg_win_dig_fltr_timebase_rate(self):
        """
        float: Specifies in hertz the rate of the digital filter
            timebase. NI-DAQmx uses this value to compute settings for
            the filter.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 12024)
        return val

    @anlg_win_dig_fltr_timebase_rate.setter
    def anlg_win_dig_fltr_timebase_rate(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 12024, val)

    @anlg_win_dig_fltr_timebase_rate.deleter
    def anlg_win_dig_fltr_timebase_rate(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12024)

    @property
    def anlg_win_dig_fltr_timebase_src(self):
        """
        str: Specifies the terminal of the signal to use as the timebase
            of the digital filter.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 12023)
        return val

    @anlg_win_dig_fltr_timebase_src.setter
    def anlg_win_dig_fltr_timebase_src(self, val):
        self._interpreter.set_trig_attribute_string(
                self._handle, 12023, val)

    @anlg_win_dig_fltr_timebase_src.deleter
    def anlg_win_dig_fltr_timebase_src(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12023)

    @property
    def anlg_win_dig_sync_enable(self):
        """
        bool: Specifies whether to synchronize recognition of
            transitions in the signal to the internal timebase of the
            device.
        """


        val = self._interpreter.get_trig_attribute_bool(
                self._handle, 12025)
        return val

    @anlg_win_dig_sync_enable.setter
    def anlg_win_dig_sync_enable(self, val):
        self._interpreter.set_trig_attribute_bool(
                self._handle, 12025, val)

    @anlg_win_dig_sync_enable.deleter
    def anlg_win_dig_sync_enable(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 12025)

    @property
    def anlg_win_src(self):
        """
        str: Specifies the name of a virtual channel or terminal where
            there is an analog signal to use as the source of the
            trigger.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 4979)
        return val

    @anlg_win_src.setter
    def anlg_win_src(self, val):
        self._interpreter.set_trig_attribute_string(
                self._handle, 4979, val)

    @anlg_win_src.deleter
    def anlg_win_src(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4979)

    @property
    def anlg_win_top(self):
        """
        float: Specifies the upper limit of the window. Specify this
            value in the units of the measurement or generation.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 4982)
        return val

    @anlg_win_top.setter
    def anlg_win_top(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 4982, val)

    @anlg_win_top.deleter
    def anlg_win_top(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4982)

    @property
    def anlg_win_when(self):
        """
        :class:`nidaqmx.constants.WindowTriggerCondition2`: Specifies
            whether the task pauses while the trigger signal is inside
            or outside the window you specify with **anlg_win_btm** and
            **anlg_win_top**.
        """


        val = self._interpreter.get_trig_attribute_int32(
                self._handle, 4980)
        return WindowTriggerCondition2(val)

    @anlg_win_when.setter
    def anlg_win_when(self, val):
        val = val.value
        self._interpreter.set_trig_attribute_int32(
                self._handle, 4980, val)

    @anlg_win_when.deleter
    def anlg_win_when(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4980)

    @property
    def dig_lvl_dig_fltr_enable(self):
        """
        bool: Specifies whether to apply a digital filter to the trigger
            signal.
        """


        val = self._interpreter.get_trig_attribute_bool(
                self._handle, 8744)
        return val

    @dig_lvl_dig_fltr_enable.setter
    def dig_lvl_dig_fltr_enable(self, val):
        self._interpreter.set_trig_attribute_bool(
                self._handle, 8744, val)

    @dig_lvl_dig_fltr_enable.deleter
    def dig_lvl_dig_fltr_enable(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8744)

    @property
    def dig_lvl_dig_fltr_min_pulse_width(self):
        """
        float: Specifies in seconds the minimum pulse width the filter
            recognizes.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 8745)
        return val

    @dig_lvl_dig_fltr_min_pulse_width.setter
    def dig_lvl_dig_fltr_min_pulse_width(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 8745, val)

    @dig_lvl_dig_fltr_min_pulse_width.deleter
    def dig_lvl_dig_fltr_min_pulse_width(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8745)

    @property
    def dig_lvl_dig_fltr_timebase_rate(self):
        """
        float: Specifies in hertz the rate of the pulse width filter
            timebase. NI-DAQmx uses this value to compute settings for
            the filter.
        """


        val = self._interpreter.get_trig_attribute_double(
                self._handle, 8747)
        return val

    @dig_lvl_dig_fltr_timebase_rate.setter
    def dig_lvl_dig_fltr_timebase_rate(self, val):
        self._interpreter.set_trig_attribute_double(
                self._handle, 8747, val)

    @dig_lvl_dig_fltr_timebase_rate.deleter
    def dig_lvl_dig_fltr_timebase_rate(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8747)

    @property
    def dig_lvl_dig_fltr_timebase_src(self):
        """
        str: Specifies the input terminal of the signal to use as the
            timebase of the pulse width filter.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 8746)
        return val

    @dig_lvl_dig_fltr_timebase_src.setter
    def dig_lvl_dig_fltr_timebase_src(self, val):
        self._interpreter.set_trig_attribute_string(
                self._handle, 8746, val)

    @dig_lvl_dig_fltr_timebase_src.deleter
    def dig_lvl_dig_fltr_timebase_src(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8746)

    @property
    def dig_lvl_dig_sync_enable(self):
        """
        bool: Specifies whether to synchronize recognition of
            transitions in the signal to the internal timebase of the
            device.
        """


        val = self._interpreter.get_trig_attribute_bool(
                self._handle, 8748)
        return val

    @dig_lvl_dig_sync_enable.setter
    def dig_lvl_dig_sync_enable(self, val):
        self._interpreter.set_trig_attribute_bool(
                self._handle, 8748, val)

    @dig_lvl_dig_sync_enable.deleter
    def dig_lvl_dig_sync_enable(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8748)

    @property
    def dig_lvl_src(self):
        """
        str: Specifies the name of a terminal where there is a digital
            signal to use as the source of the Pause Trigger.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 4985)
        return val

    @dig_lvl_src.setter
    def dig_lvl_src(self, val):
        self._interpreter.set_trig_attribute_string(
                self._handle, 4985, val)

    @dig_lvl_src.deleter
    def dig_lvl_src(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4985)

    @property
    def dig_lvl_when(self):
        """
        :class:`nidaqmx.constants.Level`: Specifies whether the task
            pauses while the signal is high or low.
        """


        val = self._interpreter.get_trig_attribute_int32(
                self._handle, 4992)
        return Level(val)

    @dig_lvl_when.setter
    def dig_lvl_when(self, val):
        val = val.value
        self._interpreter.set_trig_attribute_int32(
                self._handle, 4992, val)

    @dig_lvl_when.deleter
    def dig_lvl_when(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4992)

    @property
    def dig_pattern_pattern(self):
        """
        str: Specifies the digital pattern that must be met for the
            Pause Trigger to occur.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 8584)
        return val

    @dig_pattern_pattern.setter
    def dig_pattern_pattern(self, val):
        self._interpreter.set_trig_attribute_string(
                self._handle, 8584, val)

    @dig_pattern_pattern.deleter
    def dig_pattern_pattern(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8584)

    @property
    def dig_pattern_src(self):
        """
        :class:`nidaqmx.system.physical_channel.PhysicalChannel`:
            Specifies the physical channels to use for pattern matching.
            The order of the physical channels determines the order of
            the pattern. If a port is included, the lines within the
            port are in ascending order.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 8559)
        return PhysicalChannel(val)

    @dig_pattern_src.setter
    def dig_pattern_src(self, val):
        val = val.name
        self._interpreter.set_trig_attribute_string(
                self._handle, 8559, val)

    @dig_pattern_src.deleter
    def dig_pattern_src(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8559)

    @property
    def dig_pattern_when(self):
        """
        :class:`nidaqmx.constants.DigitalPatternCondition`: Specifies if
            the Pause Trigger occurs when the physical channels
            specified with **dig_pattern_src** match or differ from the
            digital pattern specified with **dig_pattern_pattern**.
        """


        val = self._interpreter.get_trig_attribute_int32(
                self._handle, 8560)
        return DigitalPatternCondition(val)

    @dig_pattern_when.setter
    def dig_pattern_when(self, val):
        val = val.value
        self._interpreter.set_trig_attribute_int32(
                self._handle, 8560, val)

    @dig_pattern_when.deleter
    def dig_pattern_when(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 8560)

    @property
    def term(self):
        """
        str: Indicates the name of the internal Pause Trigger terminal
            for the task. This property does not return the name of the
            trigger source terminal.
        """


        val = self._interpreter.get_trig_attribute_string(
                self._handle, 12064)
        return val

    @property
    def trig_type(self):
        """
        :class:`nidaqmx.constants.TriggerType`: Specifies the type of
            trigger to use to pause a task.
        """


        val = self._interpreter.get_trig_attribute_int32(
                self._handle, 4966)
        return TriggerType(val)

    @trig_type.setter
    def trig_type(self, val):
        val = val.value
        self._interpreter.set_trig_attribute_int32(
                self._handle, 4966, val)

    @trig_type.deleter
    def trig_type(self):
        self._interpreter.reset_trig_attribute(
                self._handle, 4966)

