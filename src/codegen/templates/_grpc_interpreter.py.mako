<%
    from codegen.utilities.interpreter_helpers import get_interpreter_functions, get_grpc_interpreter_call_params, get_params_for_function_signature, get_interpreter_parameter_signature, get_output_params, get_response_parameters, get_compound_parameter, create_compound_parameter_request, get_input_arguments_for_compound_params
    from codegen.utilities.function_helpers import order_function_parameters_by_optional
    from codegen.utilities.text_wrappers import wrap, docstring_wrap
    from codegen.utilities.helpers import snake_to_pascal
    functions = get_interpreter_functions(data)
%>\
# Do not edit this file; it was automatically generated.

import grpc

from . import errors as errors
from nidaqmx._base_interpreter import BaseInterpreter
from nidaqmx._stubs import nidaqmx_pb2 as grpc_types
from nidaqmx._stubs import nidaqmx_pb2_grpc as nidaqmx_grpc
from nidaqmx._stubs import session_pb2 as session_grpc_types



class GrpcStubInterpreter(BaseInterpreter):
    '''Interpreter for interacting with a gRPC Stub class'''
    __slots__ = ['_grpc_options', '_client']


    def __init__(self, grpc_options):
        self._grpc_options = grpc_options
        self._client = nidaqmx_grpc.NiDAQmxStub(grpc_options.grpc_channel)

    def _invoke(self, func, request, metadata=None):
        try:
            response = func(request, metadata=metadata)
            error_code = response.status
            error_message = ''
        #Todo: AB#2325876: The error handling logic will be updated.
        except grpc.RpcError as rpc_error:
            raise rpc_error
        return response
% for func in functions:
<%
    params = get_params_for_function_signature(func)
    sorted_params = order_function_parameters_by_optional(params)
    parameter_signature = get_interpreter_parameter_signature(is_python_factory, sorted_params)
    output_parameters = get_output_params(func)
    compound_parameter = get_compound_parameter(sorted_params)
    %>
    %if (len(func.function_name) + len(parameter_signature)) > 68:
    def ${func.function_name}(
            ${parameter_signature + '):' | wrap(12, 12)}
    %else:
    def ${func.function_name}(${parameter_signature}):
    %endif
    %if (compound_parameter is not None):
        ${compound_parameter.parameter_name} = []
        for index in range(len(${get_input_arguments_for_compound_params(func)[0]})):
            ${compound_parameter.parameter_name}.append(${create_compound_parameter_request(func)})
    %endif
    %if (func.is_init_method):
        metadata = (
            ('ni-api-key', self._grpc_options.api_key),
        )
    %endif
        response = self._invoke(
            self._client.${snake_to_pascal(func.function_name)},
        %if (len(func.function_name) + len(get_grpc_interpreter_call_params(func, sorted_params))) > 68:
            grpc_types.${snake_to_pascal(func.function_name)}Request(
            %if func.is_init_method:
                ${get_grpc_interpreter_call_params(func, sorted_params) | wrap(16, 16)}),
            metadata=metadata)
            %else:
                ${get_grpc_interpreter_call_params(func, sorted_params) + ')' | wrap(16, 16)})
            %endif
        %else:
        %if func.is_init_method:
            grpc_types.${snake_to_pascal(func.function_name)}Request(${get_grpc_interpreter_call_params(func, sorted_params)+ ')'},
            metadata=metadata)
        %else:
            grpc_types.${snake_to_pascal(func.function_name)}Request(${get_grpc_interpreter_call_params(func, sorted_params)+ ')'})
        %endif
        %endif
        %if len(output_parameters)  > 0:
        return ${get_response_parameters(func)}
        %endif
% endfor